generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                @id @default(uuid())
  email            String                @unique
  name             String?
  password         String
  avatar           String?
  bio              String?
  role             UserRole              @default(USER)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  carts            Cart?
  comments         Comment[]
  adjustments      InventoryAdjustment[]
  likes            Like[]
  marketplaceItems MarketplaceItem[]
  orders           Order[]
  posts            Post[]
  reviews          ProductReview[]
  testimonials     Testimonial[]
  wishlists        Wishlist[]

  @@map("users")
}

model Post {
  id              String     @id @default(uuid())
  title           String
  slug            String     @unique
  content         String
  excerpt         String?
  featuredImage   String?
  status          PostStatus @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  authorId        String
  categoryId      String
  metaTitle       String?
  metaDescription String?
  keywords        String[]
  viewCount       Int        @default(0)
  featured        Boolean    @default(false)
  pinned          Boolean    @default(false)
  sortOrder       Int?
  locale          String     @default("en")
  comments        Comment[]
  likes           Like[]
  author          User       @relation(fields: [authorId], references: [id])
  category        Category   @relation(fields: [categoryId], references: [id])
  tags            Tag[]      @relation("PostToTag")

  @@map("posts")
}

model MarketplaceItem {
  id             String                @id @default(uuid())
  title          String
  slug           String                @unique
  description    String
  price          Decimal               @db.Decimal(10, 2)
  imageUrl       String
  status         ItemStatus            @default(AVAILABLE)
  categoryId     String
  sellerId       String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  specifications Json?
  features       String[]
  stock          Int                   @default(0)
  discountPrice  Decimal?              @db.Decimal(10, 2)
  weight         Decimal?              @db.Decimal(10, 2)
  dimensions     Json?
  featured       Boolean               @default(false)
  published      Boolean               @default(true)
  sortOrder      Int?
  cartItems      CartItem[]
  adjustments    InventoryAdjustment[]
  category       Category              @relation(fields: [categoryId], references: [id])
  seller         User                  @relation(fields: [sellerId], references: [id])
  orderItems     OrderItem[]
  reviews        ProductReview[]
  wishlists      Wishlist[]
  tags           Tag[]                 @relation("MarketplaceItemToTag")

  @@map("marketplace_items")
}

model Category {
  id               String            @id @default(uuid())
  name             String
  slug             String            @unique
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  marketplaceItems MarketplaceItem[]
  posts            Post[]

  @@map("categories")
}

model Tag {
  id               String            @id @default(uuid())
  name             String            @unique
  slug             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  marketplaceItems MarketplaceItem[] @relation("MarketplaceItemToTag")
  posts            Post[]            @relation("PostToTag")

  @@map("tags")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@map("likes")
}

model Wishlist {
  id        String          @id @default(uuid())
  userId    String
  itemId    String
  createdAt DateTime        @default(now())
  item      MarketplaceItem @relation(fields: [itemId], references: [id])
  user      User            @relation(fields: [userId], references: [id])

  @@unique([userId, itemId])
  @@map("wishlists")
}

model Testimonial {
  id        String   @id @default(uuid())
  content   String
  rating    Int      @default(5)
  authorId  String
  role      String?
  company   String?
  avatar    String?
  featured  Boolean  @default(false)
  published Boolean  @default(true)
  sortOrder Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])

  @@map("testimonials")
}

model ContactForm {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_forms")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    @unique
  sessionId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String          @id @default(uuid())
  cartId    String
  itemId    String
  quantity  Int             @default(1)
  price     Decimal         @db.Decimal(10, 2)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  item      MarketplaceItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([cartId, itemId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique
  userId          String?
  status          OrderStatus @default(PENDING)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @default(0) @db.Decimal(10, 2)
  shipping        Decimal     @default(0) @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  shippingAddress Json?
  billingAddress  Json?
  paymentMethod   String?
  trackingNumber  String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[]
  user            User?       @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  itemId    String
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  total     Decimal         @db.Decimal(10, 2)
  createdAt DateTime        @default(now())
  item      MarketplaceItem @relation(fields: [itemId], references: [id])
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model ProductReview {
  id        String          @id @default(uuid())
  itemId    String
  userId    String
  rating    Int
  title     String?
  comment   String?
  verified  Boolean         @default(false)
  helpful   Int             @default(0)
  status    ReviewStatus    @default(PENDING)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  item      MarketplaceItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
  @@map("product_reviews")
}

model Coupon {
  id              String     @id @default(uuid())
  code            String     @unique
  name            String
  description     String?
  type            CouponType
  value           Decimal    @db.Decimal(10, 2)
  minimumAmount   Decimal?   @db.Decimal(10, 2)
  maximumDiscount Decimal?   @db.Decimal(10, 2)
  usageLimit      Int?
  usageCount      Int        @default(0)
  userUsageLimit  Int        @default(1)
  startDate       DateTime?
  endDate         DateTime?
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("coupons")
}

model InventoryAdjustment {
  id               String          @id @default(uuid())
  itemId           String
  previousQuantity Int
  newQuantity      Int
  adjustment       Int
  reason           String
  userId           String?
  createdAt        DateTime        @default(now())
  item             MarketplaceItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user             User?           @relation(fields: [userId], references: [id])

  @@map("inventory_adjustments")
}

enum UserRole {
  USER
  AUTHOR
  EDITOR
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ItemStatus {
  AVAILABLE
  SOLD_OUT
  COMING_SOON
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}
