// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profiles
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String    // Hashed password
  avatar        String?
  bio           String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]    // Author relationship
  comments      Comment[]
  likes         Like[]
  marketplaceItems MarketplaceItem[] // Seller relationship
  wishlists     Wishlist[]
  testimonials  Testimonial[] // User testimonials
  carts         Cart[]
  orders        Order[]
  reviews       ProductReview[]
  adjustments   InventoryAdjustment[]
  @@map("users")
}

enum UserRole {
  USER
  AUTHOR
  EDITOR
  ADMIN
}

// Blog post model
model Post {
  id              String    @id @default(uuid())
  title           String
  slug            String    @unique
  content         String    @db.Text
  excerpt         String?   @db.Text
  featuredImage   String?
  status          PostStatus @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      String
  tags            Tag[]
  comments        Comment[]
  likes           Like[]
  metaTitle       String?
  metaDescription String?   @db.Text
  keywords        String[]
  viewCount       Int       @default(0)
  featured        Boolean   @default(false)
  pinned          Boolean   @default(false)
  sortOrder       Int?
  locale          String    @default("en")

  @@map("posts")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Marketplace item model
model MarketplaceItem {
  id              String    @id @default(uuid())
  title           String
  slug            String    @unique
  description     String    @db.Text
  price           Decimal   @db.Decimal(10, 2)
  imageUrl        String
  status          ItemStatus @default(AVAILABLE)
  category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      String
  seller          User      @relation(fields: [sellerId], references: [id])
  sellerId        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  specifications  Json?
  features        String[]
  tags            Tag[]
  stock           Int       @default(0)
  discountPrice   Decimal?  @db.Decimal(10, 2)
  weight          Decimal?  @db.Decimal(10, 2)
  dimensions      Json?
  featured        Boolean   @default(false)
  published       Boolean   @default(true)
  sortOrder       Int?
  wishlists       Wishlist[]

  @@map("marketplace_items")
}

enum ItemStatus {
  AVAILABLE
  SOLD_OUT
  COMING_SOON
}

// Category model for both blog posts and marketplace items
model Category {
  id              String    @id @default(uuid())
  name            String
  slug            String    @unique
  description     String?   @db.Text
  posts           Post[]
  marketplaceItems MarketplaceItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("categories")
}

// Tags for both posts and marketplace items
model Tag {
  id              String    @id @default(uuid())
  name            String    @unique
  slug            String    @unique
  posts           Post[]
  marketplaceItems MarketplaceItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("tags")
}

// Comments for blog posts
model Comment {
  id              String    @id @default(uuid())
  content         String    @db.Text
  post            Post      @relation(fields: [postId], references: [id])
  postId          String
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("comments")
}

// Likes for blog posts
model Like {
  id              String    @id @default(uuid())
  post            Post      @relation(fields: [postId], references: [id])
  postId          String
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime  @default(now())

  @@unique([postId, userId])
  @@map("likes")
}

// Wishlists for marketplace items
model Wishlist {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  item            MarketplaceItem @relation(fields: [itemId], references: [id])
  itemId          String
  createdAt       DateTime  @default(now())

  @@unique([userId, itemId])
  @@map("wishlists")
}

// Testimonial model
model Testimonial {
  id              String    @id @default(uuid())
  content         String    @db.Text
  rating          Int       @default(5)
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  role            String?   // The role/position of the person giving the testimonial
  company         String?   // The company the person works for
  avatar          String?   // URL to the avatar image
  featured        Boolean   @default(false)
  published       Boolean   @default(true)
  sortOrder       Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("testimonials")
}

// Contact form model
model ContactForm {
  id              String    @id @default(uuid())
  name            String
  email           String
  message         String    @db.Text
  status          String    @default("pending")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("contact_forms")
} 
// Enhanced Cart system (compatible with existing User model)
model Cart {
  id        String   @id @default(uuid())
  userId    String?  // Optional for guest carts
  sessionId String?  // For guest sessions
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  itemId    String   // References MarketplaceItem
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  item      MarketplaceItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, itemId])
  @@map("cart_items")
}

// Enhanced Order system
model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PENDING)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @default(0) @db.Decimal(10, 2)
  shipping        Decimal     @default(0) @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  shippingAddress Json?
  billingAddress  Json?
  paymentMethod   String?
  trackingNumber  String?
  notes           String?     @db.Text
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  itemId    String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item      MarketplaceItem @relation(fields: [itemId], references: [id])
  createdAt DateTime @default(now())

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// Product Reviews system
model ProductReview {
  id        String   @id @default(uuid())
  itemId    String
  userId    String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?  @db.Text
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  status    ReviewStatus @default(PENDING)
  item      MarketplaceItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([itemId, userId])
  @@map("product_reviews")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

// Coupon system
model Coupon {
  id              String   @id @default(uuid())
  code            String   @unique
  name            String
  description     String?  @db.Text
  type            CouponType
  value           Decimal  @db.Decimal(10, 2)
  minimumAmount   Decimal? @db.Decimal(10, 2)
  maximumDiscount Decimal? @db.Decimal(10, 2)
  usageLimit      Int?
  usageCount      Int      @default(0)
  userUsageLimit  Int      @default(1)
  startDate       DateTime?
  endDate         DateTime?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("coupons")
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

// Inventory tracking
model InventoryAdjustment {
  id               String   @id @default(uuid())
  itemId           String
  previousQuantity Int
  newQuantity      Int
  adjustment       Int
  reason           String
  userId           String?
  item             MarketplaceItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user             User?    @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())

  @@map("inventory_adjustments")
}
