# .cursorrules

Components & Naming

- Use functional components with `"use client"` if needed.
- Name in PascalCase under `client/src/components/`.
- Keep them small, typed with interfaces.
- Use use radix or shadcn.

Prisma

- Manage DB logic with Prisma in `prisma/schema.prisma`, `src/lib/db.ts`.
- snake_case table → camelCase fields.
- No raw SQL; run `npx prisma migrate dev`, never use `npx prisma db push`.

Icons

- Prefer `lucide-react`; name icons in PascalCase.
- Custom icons in `src/components/icons`.

Toast Notifications

- Use `react-toastify` in client components.
- `toast.success()`, `toast.error()`, etc.

Express server Structure

- use express, with routes in `src/routes`.
- use cors, helmet, compression, morgan, express-rate-limit, express-winston.
- use prisma for db.
- for auth use express-jwt jwks-rsa cors cors-express-jwt-auth.
- use winston for logging.
- use zod for input validation.
- use nodemailer for email.
- use stripe for payments.
- use twilio for sms.
- use sendgrid for email.

tRPC Routers

- Routers in `server/src/trpc/api/routers`, compose in `server/src/trpc/api/root.ts`.
- `publicProcedure` or `protectedProcedure` with Zod.
- Access from React via `@/lib/trpc/react`.

TypeScript & Syntax

- Strict mode. Avoid `any`.
- Use optional chaining, union types (no enums).

File & Folder Names
- the client is in the client folder.
- the client should build to the build folder in the root
  

the server is in the root.
- server.js in root.
- server/routes in kebab-case (e.g. `server/routes/auth.ts`).
- Shared types in `src/lib/types.ts`.
- Sort imports (external → internal → sibling → styles).

Tailwind Usage

- Use Tailwind (mobile-first, dark mode with dark:(class)). Extend brand tokens in `tailwind.config.ts`.
- For animations, prefer Framer Motion.

AI

- Use `generateChatCompletion` in `src/lib/aiClient.ts` for all AI calls.
- Prefer `O1` model with high reasoning effort for all AI calls.

Storybook

- Place stories next to their component with `.stories.tsx` extension.
- One story file per component, matching component name.
- Use autodocs for automatic documentation.
- Include multiple variants and sizes in stories.
- Test interactive features with actions.
- Use relative imports from component directory.

Tools

- When you make a change to the UI, use the `screenshot` tool to show the changes.
- If the user asks for a complex task to be performed, find any relevant files and call the `architect` tool to get a plan and show it to the user. Use this plan as guidance for the changes you make, but maintain the existing patterns and structure of the codebase.
- After a complex task is performed, use the `codeReview` tool create a diff and use the diff to conduct a code review of the changes.

Additional

- Keep code short; commits semantic.
- Reusable logic in `client/src/lib/utils/shared.ts` or `server/src/lib/utils/shared.ts`.
- Use `tsx` scripts for migrations.

IMPORTANT:

- After all changes are made, ALWAYS build the project with `yarn build`. Ignore warnings, fix errors.
- Always add a one-sentence summary of changes to `.cursor-updates` file in markdown format at the end of every agent interaction.
- If you forget, the user can type the command "finish" and you will run the build and update `.cursor-updates`.
- Finally, update git with `git add . && git commit -m "..."`. Don't push.
