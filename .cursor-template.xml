
<TEMPLATE>
<INSTRUCTIONS>
Use the <CODEBASE> code as reference, and convert the high-level <TASK> into a set of very detailed step-by-step instructions that an AI coding agent can complete. This could be very long, that's okay. The entire code is not needed, but give snippets if needed, but be very specific about the file names.
Only includes steps an AI coding agent can take. Do not include testing or any other work a human would do to confirm the task has been completed. 
ALWAYS have the agent run a build when it is complete. Be specific and decisive about what the agent should do. 
Do not include any additional meta instructions to the user. Use markdown formatting.
</INSTRUCTIONS>
<TASK>

1. **Database Setup & Content Migration**
   1. [ ] **Analyze Marketplace Page:**  
      - Inspect the live page and source code to identify all data fields (e.g., title, description, image URL, price, category, etc.).  
      - Document the current structure and any dynamic elements in a file (e.g., `marketplace_fields.md`).
   2. [ ] **Analyze Blog Page:**  
      - Examine the blog page to list required fields (e.g., title, author, content, published date, image URL, tags, etc.).  
      - Record findings in a separate document (e.g., `blog_fields.md`).
   3. [ ] **Design Database Schema:**  
      - Based on the analyses, design a relational schema with tables for `MarketplaceItems` and `BlogPosts`.  
      - Create a diagram (using a tool like dbdiagram.io) outlining fields, data types, constraints, and relationships.
   4. [ ] **Initialize Prisma:**  
      - Install Prisma dependencies (`npm install prisma @prisma/client`).  
      - Run `npx prisma init` to generate the Prisma folder and configure the database connection in the `.env` file.
   5. [ ] **Implement Prisma Schema:**  
      - Edit `schema.prisma` to define models for `MarketplaceItem` and `BlogPost` with fields identified earlier.  
      - Add indexes, constraints, and relations as needed; then validate with `npx prisma validate`.
   6. [ ] **Migrate Existing Content:**  
      - Run a migration command (e.g., `npx prisma migrate dev --name init`) to create the database schema.  
      - Write a seeding script or manually import existing marketplace and blog content into the database.  
      - Verify the data with `npx prisma studio`.

2. **Robust API Endpoints**
   1. [ ] **Form Submission Endpoint:**  
      - Create a POST API route (e.g., `/api/submit-form`) that validates incoming data and inserts it into a dedicated submissions table using the Prisma client.  
      - Ensure proper error handling and return success/error responses in JSON format.
   2. [ ] **Marketplace Items Endpoint:**  
      - Create a GET API route (e.g., `/api/marketplace`) that retrieves all marketplace items from the database via Prisma.  
      - Implement support for pagination and filtering through query parameters.
   3. [ ] **Blog Posts Endpoint:**  
      - Create a GET API route (e.g., `/api/blog`) to fetch blog posts from the database using Prisma.  
      - Support additional query parameters for pagination, filtering, or search.
   4. [ ] **Testimonials Endpoint (Optional):**  
      - If testimonials are used, create an API route (e.g., `/api/testimonials`) and define a corresponding Prisma model to fetch testimonial data.
   5. [ ] **Case Studies Endpoint (Optional):**  
      - If applicable, create an API route (e.g., `/api/case-studies`) with an associated Prisma model to retrieve case study data.
   6. [ ] **API Unit Testing:**  
      - Write unit tests using a framework like Jest for each API endpoint (covering both success and error scenarios).  
      - Configure a test database environment and run tests to verify correct DB integration.

3. **Update Existing Pages to Use API Endpoints**
   1. [ ] **Home Page Update:**  
      - Modify the home page to replace static content with dynamic content fetched from API endpoints (e.g., featured marketplace items, latest blog posts).  
      - Implement client-side fetch calls (using `fetch` or Axios) with proper loading and error states.
   2. [ ] **Marketplace Page Update:**  
      - Update the marketplace page to call `/api/marketplace` and render data dynamically.  
      - Handle API responses and errors gracefully on the client side.
   3. [ ] **Blog Page Update:**  
      - Refactor the blog page to fetch posts via `/api/blog` instead of using static content.  
      - Update the UI to display data with appropriate loading indicators and error messages.
   4. [ ] **Contact/Form Pages Update:**  
      - Connect form elements to the `/api/submit-form` endpoint, ensuring that the form validates inputs before submission.  
      - Display user feedback based on API responses.
   5. [ ] **API Integration Testing:**  
      - Test the updated pages to confirm that API data is fetched correctly and displayed.  
      - Validate that error handling and loading states function as intended.

4. **Management Dashboard**
   1. [ ] **Marketplace Admin UI:**  
      - Develop a secure admin page that lists all marketplace items by calling the appropriate API endpoint.  
      - Implement a table or list view with options to edit or delete each item.
   2. [ ] **Add Marketplace Item:**  
      - Create a form within the admin UI for adding new marketplace items.  
      - Link the form to a POST API endpoint that inserts data into the database; include client-side validation and success/error notifications.
   3. [ ] **Edit Marketplace Item:**  
      - Enable edit functionality by providing a pre-filled form on the admin page for the selected item.  
      - Connect the form to a PUT/PATCH API endpoint to update the item in the database.
   4. [ ] **Delete Marketplace Item:**  
      - Add a delete button for each marketplace item, triggering an API call to remove the item from the database.  
      - Incorporate a confirmation dialog to prevent accidental deletions.
   5. [ ] **Blog Admin UI:**  
      - Build a separate admin page for managing blog posts, listing all posts retrieved via the API.  
      - Include options to edit or delete individual posts.
   6. [ ] **Add Blog Post:**  
      - Develop a form for creating new blog posts, connecting to a POST API endpoint that saves the post to the database.  
      - Validate input fields and provide feedback on submission.
   7. [ ] **Edit Blog Post:**  
      - Implement an edit form that pre-loads existing blog post data, linked to an API endpoint for updating the record.  
      - Ensure proper handling of validation and update success.
   8. [ ] **Delete Blog Post:**  
      - Include a delete function in the blog admin UI that triggers an API call to remove a blog post from the database.  
      - Use a confirmation modal to verify the deletion.
   9. [ ] **Admin Authentication:**  
      - Implement authentication (using JWT or session-based methods) to secure all admin routes and API endpoints.  
      - Ensure only authenticated users can access the dashboard and perform CRUD operations.

5. **Enhanced User Experience**
   1. [ ] **Marketplace Search:**  
      - Add a search input on the marketplace page that sends keywords as query parameters to `/api/marketplace`.  
      - Update the UI to display real-time search results.
   2. [ ] **Marketplace Filtering:**  
      - Implement dropdowns or checkboxes for filtering marketplace items (e.g., by category or price range).  
      - Pass filter criteria to the API and update the displayed results.
   3. [ ] **Blog Search:**  
      - Incorporate a search bar on the blog page to filter posts by title, content, or tags via query parameters to `/api/blog`.  
      - Dynamically update the list of blog posts based on the search results.
   4. [ ] **Blog Filtering:**  
      - Add filtering options (e.g., by date or category) on the blog page and send filter parameters to the API.  
      - Ensure the UI refreshes to display only the filtered posts.
   5. [ ] **Testimonial Slider:**  
      - Develop an interactive slider component that retrieves testimonial data from the API or database.  
      - Ensure the component is responsive and includes auto-scroll and manual navigation controls.
   6. [ ] **Dynamic Portfolio:**  
      - Create a portfolio section that loads project data dynamically from an API endpoint or directly from the database.  
      - Display the projects in a responsive grid layout with details on hover or click.

6. **Performance & SEO**
   1. [ ] **Lazy-load Images:**  
      - Implement lazy-loading using native HTML attributes (e.g., `loading="lazy"`) or a library such as Lozad.js.  
      - Test that images only load when entering the viewport.
   2. [ ] **Code Splitting:**  
      - Use dynamic imports (e.g., `import()` syntax) or configure the bundler (Webpack, Vite, etc.) to split code into smaller chunks.  
      - Verify improvements in initial load times.
   3. [ ] **Asset Caching:**  
      - Configure proper caching headers for static assets (images, CSS, JS).  
      - Consider using a CDN for faster asset delivery.
   4. [ ] **SEO Meta Tags:**  
      - Ensure each page contains appropriate meta tags (title, description, Open Graph, etc.) and structured data.  
      - Validate changes using SEO tools.
   5. [ ] **URL Optimization:**  
      - Review current URL structures and refactor them to be clean and SEO-friendly.  
      - Set up URL rewriting or redirection as necessary.

7. **Accessibility & Responsiveness**
   1. [ ] **ARIA Audit:**  
      - Run accessibility audits (using tools like Lighthouse or axe) and identify elements missing ARIA attributes.  
      - Update the code to include ARIA roles, labels, and properties where needed.
   2. [ ] **Keyboard Navigation:**  
      - Test the site to ensure all interactive elements are accessible via keyboard (tab order, focus states, etc.).  
      - Update UI components to fix any keyboard accessibility issues.
   3. [ ] **Mobile Responsiveness:**  
      - Adjust CSS styles and layout breakpoints to ensure optimal display on mobile devices.  
      - Test the site on various mobile screen sizes.
   4. [ ] **Tablet Responsiveness:**  
      - Fine-tune layouts, font sizes, and touch target sizes for tablet devices.  
      - Validate that interactive elements perform smoothly on tablets.

8. **Analytics & Engagement**
   1. [ ] **Analytics Integration:**  
      - Integrate an analytics tool (e.g., Google Analytics) by adding the tracking script to the site's head.  
      - Confirm tracking is active on all pages.
   2. [ ] **Event Tracking:**  
      - Configure event tracking for key interactions (e.g., form submissions, button clicks) in the analytics dashboard.  
      - Update API endpoints or UI components to trigger these events.
   3. [ ] **Feedback Form:**  
      - Develop a dedicated feedback form (or modal) that submits user feedback via an API endpoint or email service.  
      - Validate form data and provide user notifications upon submission.
   4. [ ] **Monthly Analytics Review:**  
      - Set up a recurring process (e.g., a calendar reminder) to review analytics reports monthly.  
      - Document key metrics and insights for further improvements.

9. **Code Quality & Security (Optional)**
   1. [ ] **Module Refactoring:**  
      - Identify complex or redundant modules and refactor them for clarity and maintainability.  
      - Update documentation and unit tests to reflect changes.
   2. [ ] **API Error Handling:**  
      - Implement comprehensive error handling (using try/catch blocks and middleware) for all API endpoints.  
      - Standardize error response formats.
   3. [ ] **Logging Integration:**  
      - Integrate a logging library (e.g., Winston or Morgan) to capture API errors and critical operations.  
      - Configure separate logging for development and production environments.
   4. [ ] **HTTPS Enforcement:**  
      - Configure the server to automatically redirect HTTP requests to HTTPS.  
      - Test the enforcement using online security tools.
   5. [ ] **Secure Headers:**  
      - Set up middleware to add security headers (CSP, X-Frame-Options, etc.) to all responses.  
      - Verify header configurations using browser tools and online validators.
10. **Documentation and Final Steps**

   1. [ ] **Update the Project README**
      - Include instructions on how to install dependencies, run the development server, and build the project.
      - Provide a brief overview of the project’s purpose and structure.

   2. [ ] **Final Review and Testing**
      - Ensure that all components render correctly and the navigation works as expected.
      - Test the app in both development and production modes to confirm proper behavior.

</TASK>
<CURSOR_RULES>
rules:
  - name: Components & Naming
    files: "client/src/components/**/*.{tsx,jsx}"
    description: |
      Use functional components with "use client" when needed.
      Name components in PascalCase, keep them small, and type them using interfaces.
      Prefer using radix or shadcn.

  - name: Prisma
    files:
      - "prisma/schema.prisma"
      - "src/lib/db.ts"
    description: |
      Manage database logic with Prisma.
      Map snake_case table names to camelCase fields.
      Avoid raw SQL; always run `npx prisma migrate dev` and never use `npx prisma db push`.

  - name: Icons
    files: "client/src/components/icons/**/*"
    description: |
      Prefer using `lucide-react` for icons, naming them in PascalCase.
      For custom icons, use the `client/src/components/icons` directory.

  - name: Toast Notifications
    files: "client/src/components/**/*.{tsx,jsx}"
    description: |
      Use `react-toastify` for notifications in client components.
      Invoke methods like `toast.success()` and `toast.error()` as needed.

  - name: Express Server Structure
    files:
      - "src/routes/**/*.ts"
      - "server.js"
      - "server/routes/**/*.ts"
    description: |
      Build the Express server with routes defined in `src/routes` and `server/routes` (in kebab-case).
      Incorporate middleware (cors, helmet, compression, morgan, express-rate-limit, express-winston).
      Use Prisma for DB access.
      For authentication, apply express-jwt with jwks-rsa and cors-express-jwt-auth.
      Use winston for logging, zod for input validation, nodemailer for emails, stripe for payments,
      and twilio/sendgrid for SMS/email as appropriate.

  - name: tRPC Routers
    files:
      - "server/src/trpc/api/routers/**/*.ts"
      - "server/src/trpc/api/root.ts"
    description: |
      Define tRPC routers in `server/src/trpc/api/routers` and compose them in `server/src/trpc/api/root.ts`.
      Use `publicProcedure` or `protectedProcedure` with Zod validation.
      Access these procedures from React via `@/lib/trpc/react`.

  - name: TypeScript & Syntax
    files: "**/*.{ts,tsx}"
    description: |
      Enforce strict mode and avoid using `any`.
      Utilize optional chaining and union types; avoid enums.

  - name: File & Folder Naming
    files: "**/*"
    description: |
      Place client code in the `client` folder (building to the root’s `build` folder).
      Server code resides in the root, with `server.js` at the root and routes in kebab-case (e.g. `server/routes/auth.ts`).
      Store shared types in `src/lib/types.ts`.
      Maintain sorted import order: external → internal → sibling → styles.

  - name: AI Integration
    files: "src/lib/aiClient.ts"
    description: |
      Route all AI calls through `generateChatCompletion`.
      Prefer the `O1` model with high reasoning effort.

  - name: Storybook Configuration
    files: "**/*.stories.tsx"
    description: |
      Place Storybook stories adjacent to their components (with a `.stories.tsx` extension).
      Ensure one story file per component (named to match the component), use autodocs for documentation,
      include multiple variants/sizes, and test interactive features using actions.
      Use relative imports from the component directory.

  - name: Tools & Workflow
    files: "**/*"
    description: |
      When modifying the UI, use the `screenshot` tool to capture changes.
      For complex tasks, utilize the `architect` tool to produce a plan and then the `codeReview` tool to
      create and review diffs—ensuring adherence to existing code patterns and structure.

  - name: Additional Guidelines
    files: "**/*"
    description: |
      Keep code concise with semantic commits.
      Place reusable logic in `client/src/lib/utils/shared.ts` or `server/src/lib/utils/shared.ts`.
      Use `tsx` scripts for migrations.

  - name: Build & Commit Process
    files: "**/*"
    description: |
      After all changes, always build the project with `yarn build` (ignore warnings, fix errors).
      Append a one-sentence summary of changes to the `.cursor-updates` file (in markdown) at the end of each agent interaction.
      If forgotten, use the "finish" command to trigger the build and update.
      Finally, update git with `git add . && git commit -m "..."` (but do not push).

</CURSOR_RULES>
<CODEBASE>
<file_map>
/Users/gregstarr/projects/dev/AstralisAgencyServer
└── client
    └── src
        ├── components
        │   ├── blog
        │   │   ├── blog-list
        │   │   │   ├── blog-card.tsx
        │   │   │   ├── blog-filters.tsx
        │   │   │   ├── blog-grid.tsx
        │   │   │   ├── blog-header.tsx
        │   │   │   └── index.tsx
        │   │   ├── blog-post
        │   │   │   ├── index.tsx
        │   │   │   ├── post-content.tsx
        │   │   │   ├── post-header.tsx
        │   │   │   └── post-image.tsx
        │   │   └── blog-post-content.tsx
        │   ├── cart
        │   │   └── cart-sheet
        │   │       ├── cart-empty.tsx
        │   │       ├── cart-footer.tsx
        │   │       ├── cart-item.tsx
        │   │       └── index.tsx
        │   ├── checkout
        │   │   ├── order-summary
        │   │   │   ├── index.tsx
        │   │   │   └── order-item.tsx
        │   │   └── PayPalCheckoutButton
        │   │       ├── index.tsx
        │   │       ├── loading.tsx
        │   │       ├── paypal-button.tsx
        │   │       └── use-paypal-checkout.ts
        │   ├── contact
        │   │   └── contact-form
        │   │       ├── form-fields.tsx
        │   │       ├── form-submit.tsx
        │   │       ├── index.tsx
        │   │       ├── types.ts
        │   │       └── use-contact-form.ts
        │   ├── footer
        │   │   └── index.tsx
        │   ├── header
        │   │   └── index.tsx
        │   ├── marketplace
        │   │   └── product-grid
        │   │       ├── index.tsx
        │   │       └── product-card.tsx
        │   ├── navbar
        │   │   └── index.tsx
        │   ├── providers
        │   │   ├── payment
        │   │   │   ├── index.ts
        │   │   │   └── paypal-provider.tsx
        │   │   ├── index.tsx
        │   │   └── theme-provider.tsx
        │   ├── sections
        │   │   ├── cta
        │   │   │   └── index.tsx
        │   │   ├── hero
        │   │   │   ├── hero-actions.tsx
        │   │   │   ├── hero-image.tsx
        │   │   │   ├── hero-title.tsx
        │   │   │   └── index.tsx
        │   │   ├── portfolio
        │   │   │   ├── index.tsx
        │   │   │   └── portfolio-card.tsx
        │   │   ├── services
        │   │   │   ├── index.tsx
        │   │   │   └── service-card.tsx
        │   │   └── testimonials
        │   │       ├── index.tsx
        │   │       └── testimonial-card.tsx
        │   ├── ui
        │   │   ├── accordion.tsx
        │   │   ├── alert-dialog.tsx
        │   │   ├── alert.tsx
        │   │   ├── aspect-ratio.tsx
        │   │   ├── avatar.tsx
        │   │   ├── badge.tsx
        │   │   ├── button.tsx
        │   │   ├── card.tsx
        │   │   ├── dialog.tsx
        │   │   ├── dropdown-menu.tsx
        │   │   ├── form.tsx
        │   │   ├── hover-card.tsx
        │   │   ├── input.tsx
        │   │   ├── label.tsx
        │   │   ├── navigation-menu.tsx
        │   │   ├── scroll-area.tsx
        │   │   ├── separator.tsx
        │   │   ├── sheet.tsx
        │   │   ├── table.tsx
        │   │   ├── textarea.tsx
        │   │   ├── toast.tsx
        │   │   ├── toaster.tsx
        │   │   └── use-toast.ts
        │   └── mode-toggle.tsx
        ├── hooks
        │   ├── index.ts
        │   ├── use-lock-body.ts
        │   ├── use-mount.ts
        │   └── use-toast.ts
        ├── lib
        │   ├── blog
        │   │   ├── data
        │   │   │   ├── authors.ts
        │   │   │   ├── index.ts
        │   │   │   └── posts.ts
        │   │   ├── data.ts
        │   │   ├── index.ts
        │   │   └── types.ts
        │   ├── config
        │   │   └── payment.ts
        │   ├── hooks
        │   │   ├── index.ts
        │   │   ├── use-lock-body.ts
        │   │   ├── use-mount.ts
        │   │   └── use-toast.ts
        │   ├── marketplace
        │   │   ├── data.ts
        │   │   ├── index.ts
        │   │   └── types.ts
        │   ├── payment
        │   │   ├── paypal.ts
        │   │   └── stripe.ts
        │   ├── store
        │   │   ├── cart.ts
        │   │   └── index.ts
        │   ├── utils
        │   │   ├── cn.ts
        │   │   ├── format.ts
        │   │   ├── index.ts
        │   │   └── validation.ts
        │   ├── api.ts
        │   ├── blog-posts.ts
        │   └── utils.ts
        ├── pages
        │   ├── blog
        │   │   ├── [id].tsx
        │   │   └── index.tsx
        │   ├── checkout
        │   │   └── index.tsx
        │   ├── contact
        │   │   └── index.tsx
        │   ├── home
        │   │   └── index.tsx
        │   ├── marketplace
        │   │   └── index.tsx
        │   └── home.tsx
        ├── stories
        │   ├── assets
        │   │   ├── accessibility.png
        │   │   ├── accessibility.svg
        │   │   ├── addon-library.png
        │   │   ├── assets.png
        │   │   ├── avif-test-image.avif
        │   │   ├── context.png
        │   │   ├── discord.svg
        │   │   ├── docs.png
        │   │   ├── figma-plugin.png
        │   │   ├── github.svg
        │   │   ├── share.png
        │   │   ├── styling.png
        │   │   ├── testing.png
        │   │   ├── theming.png
        │   │   ├── tutorials.svg
        │   │   └── youtube.svg
        │   └── Configure.mdx
        ├── App.tsx
        ├── globals.css
        ├── index.css
        ├── main.tsx
        └── vite-env.d.ts

</file_map>

<file_contents>
File: client/src/components/blog/blog-list/blog-card.tsx
```tsx
"use client"

import { motion } from "framer-motion"
import { Link } from "react-router-dom"
import type { BlogPost } from "@/lib/blog-posts"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Clock } from "lucide-react"

interface BlogCardProps {
  post: BlogPost
  index: number
}

export function BlogCard({ post, index }: BlogCardProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
    >
      <Link to={`/blog/${post.id}`}>
        <Card className="h-full hover:shadow-lg transition-shadow">
          <CardHeader className="p-0">
            <div className="aspect-[16/9] relative overflow-hidden rounded-t-lg">
              <img
                src={post.image}
                alt={post.title}
                className="object-cover w-full h-full transition-transform duration-300 hover:scale-105"
              />
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <Badge className="mb-2">{post.category}</Badge>
            <h2 className="text-xl font-bold mb-2 line-clamp-2">
              {post.title}
            </h2>
            <p className="text-muted-foreground mb-4 line-clamp-2">
              {post.excerpt}
            </p>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Avatar className="h-8 w-8">
                  <AvatarImage src={post.author.avatar} />
                  <AvatarFallback>{post.author.name[0]}</AvatarFallback>
                </Avatar>
                <div className="text-sm">
                  <p className="font-medium">{post.author.name}</p>
                  <p className="text-muted-foreground">{post.date}</p>
                </div>
              </div>
              <div className="flex items-center text-muted-foreground text-sm">
                <Clock className="w-4 h-4 mr-1" />
                {post.readTime}
              </div>
            </div>
          </CardContent>
        </Card>
      </Link>
    </motion.div>
  )
}
```

File: client/src/components/blog/blog-list/blog-filters.tsx
```tsx
"use client"

import { useState } from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import type { BlogPost } from "@/lib/blog/types"

interface BlogFiltersProps {
  posts: BlogPost[]
  onFilterChange: (filteredPosts: BlogPost[]) => void
}

export function BlogFilters({ posts, onFilterChange }: BlogFiltersProps) {
  const [searchTerm, setSearchTerm] = useState("")
  const [activeCategory, setActiveCategory] = useState<string | null>(null)

  const categories = Array.from(new Set(posts.map(post => post.category)))

  const handleSearch = (term: string) => {
    setSearchTerm(term)
    filterPosts(term, activeCategory)
  }

  const handleCategoryClick = (category: string | null) => {
    setActiveCategory(category === activeCategory ? null : category)
    filterPosts(searchTerm, category === activeCategory ? null : category)
  }

  const filterPosts = (term: string, category: string | null) => {
    let filtered = [...posts]

    if (term) {
      const searchLower = term.toLowerCase()
      filtered = filtered.filter(post => 
        post.title.toLowerCase().includes(searchLower) ||
        post.excerpt.toLowerCase().includes(searchLower)
      )
    }

    if (category) {
      filtered = filtered.filter(post => post.category === category)
    }

    onFilterChange(filtered)
  }

  return (
    <div className="space-y-4 mb-8">
      <Input
        placeholder="Search posts..."
        value={searchTerm}
        onChange={(e) => handleSearch(e.target.value)}
        className="max-w-md"
      />
      <div className="flex flex-wrap gap-2">
        {categories.map((category) => (
          <Button
            key={category}
            variant={activeCategory === category ? "default" : "outline"}
            size="sm"
            onClick={() => handleCategoryClick(category)}
          >
            {category}
          </Button>
        ))}
      </div>
    </div>
  )
}
```

File: client/src/components/blog/blog-list/blog-header.tsx
```tsx
"use client"

import { motion } from "framer-motion"

export function BlogHeader() {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="text-center mb-12"
    >
      <h1 className="text-4xl font-bold mb-4">Our Blog</h1>
      <p className="text-muted-foreground max-w-2xl mx-auto">
        Insights, updates, and expert perspectives on design, development, and digital marketing.
      </p>
    </motion.div>
  )
}
```

File: client/src/components/blog/blog-list/index.tsx
```tsx
"use client"

import { useState } from "react"
import { BlogHeader } from "./blog-header"
import { BlogFilters } from "./blog-filters"
import { BlogGrid } from "./blog-grid"
import type { BlogPost } from "@/lib/blog/types"

interface BlogListProps {
  posts: BlogPost[]
}

export function BlogList({ posts }: BlogListProps) {
  const [filteredPosts, setFilteredPosts] = useState(posts)

  return (
    <div className="container mx-auto px-4 py-12">
      <BlogHeader />
      <BlogFilters posts={posts} onFilterChange={setFilteredPosts} />
      <BlogGrid posts={filteredPosts} />
    </div>
  )
}
```

File: client/src/components/blog/blog-list/blog-grid.tsx
```tsx
import { BlogCard } from "./blog-card"
import type { BlogPost } from "@/lib/blog/types"

interface BlogGridProps {
  posts: BlogPost[]
}

export function BlogGrid({ posts }: BlogGridProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {posts.map((post, index) => (
        <BlogCard key={post.id} post={post} index={index} />
      ))}
    </div>
  )
}
```

File: client/src/components/blog/blog-post/index.tsx
```tsx
"use client"

import { motion } from "framer-motion"
import type { BlogPost } from "@/lib/blog-posts"
import { PostHeader } from "./post-header"
import { PostImage } from "./post-image"
import { PostContent } from "./post-content"

interface BlogPostContentProps {
  post: BlogPost
}

export function BlogPostContent({ post }: BlogPostContentProps) {
  return (
    <article className="container mx-auto px-4 py-12 max-w-4xl">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <PostHeader post={post} />
        <PostImage src={post.image} alt={post.title} />
        <PostContent post={post} />
      </motion.div>
    </article>
  )
}
```

File: client/src/components/blog/blog-post/post-content.tsx
```tsx
"use client";

import type { BlogPost } from "@/lib/blog-posts";

interface PostContentProps {
  post: BlogPost;
}

export function PostContent({ post }: PostContentProps) {
  return (
    <div className="prose prose-lg dark:prose-invert max-w-none">
      {post.content.split("\n\n").map((paragraph, index) => (
        <p key={index} className="text-lg leading-relaxed mb-6">
          {paragraph.trim()}
        </p>
      ))}
    </div>
  );
}

```

File: client/src/components/blog/blog-post/post-image.tsx
```tsx
interface PostImageProps {
  src: string
  alt: string
}

export function PostImage({ src, alt }: PostImageProps) {
  return (
    <div className="aspect-[2/1] overflow-hidden rounded-lg mb-8">
      <img
        src={src}
        alt={alt}
        className="w-full h-full object-cover"
      />
    </div>
  )
}
```

File: client/src/components/blog/blog-post/post-header.tsx
```tsx
"use client"

import { motion } from "framer-motion"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Clock } from "lucide-react"
import type { BlogPost } from "@/lib/blog-posts"

interface PostHeaderProps {
  post: BlogPost
}

export function PostHeader({ post }: PostHeaderProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="mb-8"
    >
      <Badge className="mb-4">{post.category}</Badge>
      <h1 className="text-4xl font-bold mb-4">{post.title}</h1>
      <div className="flex items-center justify-between flex-wrap gap-4">
        <div className="flex items-center gap-3">
          <Avatar>
            <AvatarImage src={post.author.avatar} />
            <AvatarFallback>{post.author.name[0]}</AvatarFallback>
          </Avatar>
          <div>
            <p className="font-medium">{post.author.name}</p>
            <p className="text-sm text-muted-foreground">
              {post.author.role}
            </p>
          </div>
        </div>
        <div className="flex items-center gap-4 text-muted-foreground">
          <span>{post.date}</span>
          <div className="flex items-center">
            <Clock className="w-4 h-4 mr-1" />
            {post.readTime}
          </div>
        </div>
      </div>
    </motion.div>
  )
}
```

File: client/src/components/cart/cart-sheet/cart-empty.tsx
```tsx
import { ShoppingCart } from "lucide-react"

export function CartEmpty() {
  return (
    <div className="flex h-full flex-col items-center justify-center space-y-4">
      <ShoppingCart className="h-12 w-12 text-muted-foreground" />
      <p className="text-lg font-medium">Your cart is empty</p>
    </div>
  )
}
```

File: client/src/components/blog/blog-post-content.tsx
```tsx
"use client"

import { motion } from "framer-motion"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Clock } from "lucide-react"
import type { BlogPost } from "@/lib/blog-posts"

interface BlogPostContentProps {
  post: BlogPost
}

export function BlogPostContent({ post }: BlogPostContentProps) {
  return (
    <article className="container mx-auto px-4 py-12 max-w-4xl">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="mb-8">
          <Badge className="mb-4">{post.category}</Badge>
          <h1 className="text-4xl font-bold mb-4">{post.title}</h1>
          <div className="flex items-center justify-between flex-wrap gap-4">
            <div className="flex items-center gap-3">
              <Avatar>
                <AvatarImage src={post.author.avatar} />
                <AvatarFallback>{post.author.name[0]}</AvatarFallback>
              </Avatar>
              <div>
                <p className="font-medium">{post.author.name}</p>
                <p className="text-sm text-muted-foreground">
                  {post.author.role}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-4 text-muted-foreground">
              <span>{post.date}</span>
              <div className="flex items-center">
                <Clock className="w-4 h-4 mr-1" />
                {post.readTime}
              </div>
            </div>
          </div>
        </div>

        <div className="aspect-[2/1] overflow-hidden rounded-lg mb-8">
          <img
            src={post.image}
            alt={post.title}
            className="w-full h-full object-cover"
          />
        </div>

        <div className="prose prose-lg dark:prose-invert max-w-none">
          {post.content.split('\n\n').map((paragraph, index) => (
            <p key={index} className="text-lg leading-relaxed mb-6">
              {paragraph.trim()}
            </p>
          ))}
        </div>
      </motion.div>
    </article>
  )
}
```

File: client/src/components/cart/cart-sheet/cart-footer.tsx
```tsx
"use client";

import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Loader2 } from "lucide-react";

interface CartFooterProps {
  total: number;
  isLoading: boolean;
  onCheckout: () => void;
}

export function CartFooter({ total, isLoading, onCheckout }: CartFooterProps) {
  return (
    <div className="space-y-4">
      <Separator />
      <div className="space-y-1.5">
        <div className="flex justify-between">
          <span className="font-medium">Total</span>
          <span className="font-bold">${total.toFixed(2)}</span>
        </div>
      </div>
      <Button
        className="w-full"
        onClick={onCheckout}
        disabled={isLoading || total === 0}
      >
        {isLoading ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Processing...
          </>
        ) : (
          "Checkout"
        )}
      </Button>
    </div>
  );
}

```

File: client/src/components/cart/cart-sheet/cart-item.tsx
```tsx
"use client"

import { Button } from "@/components/ui/button"
import { Trash2 } from "lucide-react"
import type { CartItem } from "@/lib/store"

interface CartItemProps {
  item: CartItem
  onUpdateQuantity: (id: string, quantity: number) => void
  onRemove: (id: string) => void
}

export function CartItem({ item, onUpdateQuantity, onRemove }: CartItemProps) {
  return (
    <div className="flex items-center space-x-4">
      <div className="relative h-16 w-16 overflow-hidden rounded">
        <img
          src={item.image}
          alt={item.name}
          className="h-full w-full object-cover"
        />
      </div>
      <div className="flex-1">
        <h3 className="font-medium">{item.name}</h3>
        <p className="text-sm text-muted-foreground">
          ${item.price.toFixed(2)}
        </p>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="icon"
            className="h-6 w-6"
            onClick={() => onUpdateQuantity(item.id, Math.max(1, item.quantity - 1))}
          >
            -
          </Button>
          <span>{item.quantity}</span>
          <Button
            variant="outline"
            size="icon"
            className="h-6 w-6"
            onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}
          >
            +
          </Button>
        </div>
      </div>
      <Button
        variant="ghost"
        size="icon"
        onClick={() => onRemove(item.id)}
      >
        <Trash2 className="h-4 w-4" />
      </Button>
    </div>
  )
}
```

File: client/src/components/cart/cart-sheet/index.tsx
```tsx
"use client"

import { useState } from "react"
import { useNavigate } from "react-router-dom"
import { useCart } from "@/lib/store"
import { Button } from "@/components/ui/button"
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet"
import { ScrollArea } from "@/components/ui/scroll-area"
import { ShoppingCart } from "lucide-react"
import { useToast } from "@/lib/hooks"
import { CartItem } from "./cart-item"
import { CartFooter } from "./cart-footer"
import { CartEmpty } from "./cart-empty"

export function CartSheet() {
  const [isOpen, setIsOpen] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const navigate = useNavigate()
  const { items, total, removeItem, updateQuantity } = useCart()
  const { toast } = useToast()

  const handleCheckout = async () => {
    if (items.length === 0) {
      toast({
        title: "Cart is empty",
        description: "Please add items to your cart before checking out.",
        variant: "destructive",
      })
      return
    }

    try {
      setIsLoading(true)
      setIsOpen(false)
      navigate("/checkout")
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to start checkout",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <Sheet open={isOpen} onOpenChange={setIsOpen}>
      <SheetTrigger asChild>
        <Button variant="ghost" size="icon" className="relative">
          <ShoppingCart className="h-5 w-5" />
          {items.length > 0 && (
            <span className="absolute -top-1 -right-1 h-4 w-4 rounded-full bg-primary text-[10px] font-bold flex items-center justify-center text-primary-foreground">
              {items.reduce((acc, item) => acc + item.quantity, 0)}
            </span>
          )}
        </Button>
      </SheetTrigger>
      <SheetContent>
        <SheetHeader>
          <SheetTitle>Shopping Cart</SheetTitle>
        </SheetHeader>
        {items.length === 0 ? (
          <CartEmpty />
        ) : (
          <>
            <ScrollArea className="h-[calc(100vh-12rem)]">
              <div className="space-y-4 pr-6">
                {items.map((item) => (
                  <CartItem
                    key={item.id}
                    item={item}
                    onUpdateQuantity={updateQuantity}
                    onRemove={removeItem}
                  />
                ))}
              </div>
            </ScrollArea>
            <CartFooter
              total={total}
              isLoading={isLoading}
              onCheckout={handleCheckout}
            />
          </>
        )}
      </SheetContent>
    </Sheet>
  )
}
```

File: client/src/components/checkout/order-summary/index.tsx
```tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { OrderItem } from "./order-item"
import type { CartItem } from "@/lib/store"

interface OrderSummaryProps {
  items: CartItem[]
  total: number
}

export function OrderSummary({ items, total }: OrderSummaryProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Order Summary</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {items.map((item) => (
            <OrderItem
              key={item.id}
              name={item.name}
              quantity={item.quantity}
              price={item.price}
            />
          ))}

          <Separator />

          <div className="flex justify-between text-lg font-bold">
            <span>Total</span>
            <span>${total.toFixed(2)}</span>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
```

File: client/src/components/checkout/PayPalCheckoutButton/index.tsx
```tsx
import { usePayPalScriptReducer } from "@paypal/react-paypal-js"
import { PayPalButton } from "./paypal-button"
import { PayPalLoading } from "./loading"
import { usePayPalCheckout } from "./use-paypal-checkout"

interface PayPalCheckoutButtonProps {
  amount: number
}

export function PayPalCheckoutButton({ amount }: PayPalCheckoutButtonProps) {
  const [{ isPending }] = usePayPalScriptReducer()
  const { isProcessing } = usePayPalCheckout()

  if (isPending || isProcessing) {
    return <PayPalLoading />
  }

  return <PayPalButton amount={amount} />
}
```

File: client/src/components/checkout/PayPalCheckoutButton/paypal-button.tsx
```tsx
import { PayPalButtons } from "@paypal/react-paypal-js";
import { usePayPalCheckout } from "./use-paypal-checkout";

interface PayPalButtonProps {
  amount: number;
}

export function PayPalButton({ amount }: PayPalButtonProps) {
  const { handleApprove, handleError } = usePayPalCheckout();

  return (
    <PayPalButtons
      style={{
        layout: "vertical",
        shape: "rect",
        label: "pay",
      }}
      createOrder={(_, actions) => {
        try {
          return actions.order.create({
            intent: "CAPTURE",
            purchase_units: [
              {
                amount: {
                  value: amount.toFixed(2),
                  currency_code: "USD",
                },
              },
            ],
          });
        } catch (error) {
          console.error("Error creating PayPal order:", error);
          throw error;
        }
      }}
      onApprove={handleApprove}
      onError={handleError}
    />
  );
}

```

File: client/src/components/checkout/PayPalCheckoutButton/loading.tsx
```tsx
import { Loader2 } from "lucide-react"

export function PayPalLoading() {
  return (
    <div className="flex items-center justify-center p-4">
      <Loader2 className="h-6 w-6 animate-spin" />
    </div>
  )
}
```

File: client/src/components/checkout/PayPalCheckoutButton/use-paypal-checkout.ts
```ts
import { useState } from "react"
import { useNavigate } from "react-router-dom"
import { useCart } from "@/lib/store"
import { useToast } from "@/lib/hooks"

export function usePayPalCheckout() {
  const [isProcessing, setIsProcessing] = useState(false)
  const navigate = useNavigate()
  const clearCart = useCart((state) => state.clearCart)
  const { toast } = useToast()

  const handleApprove = async (data: any, actions: any) => {
    console.log("PayPal onApprove:", JSON.stringify(data))
    try {
      setIsProcessing(true)
      const order = await actions.order?.capture()
      
      if (order) {
        clearCart()
        toast({
          title: "Payment successful!",
          description: "Your order has been processed successfully.",
        })
        navigate("/checkout/success", { 
          state: { orderId: order.id }
        })
      }
    } catch (error) {
      console.error("PayPal capture error:", error)
      toast({
        title: "Payment failed",
        description: "There was an error processing your payment. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsProcessing(false)
    }
  }

  const handleError = (err: unknown) => {
    console.error("PayPal error:", err)
    toast({
      title: "Payment failed",
      description: "There was an error initializing PayPal. Please try again.",
      variant: "destructive",
    })
  }

  return {
    isProcessing,
    handleApprove,
    handleError
  }
}
```

File: client/src/components/contact/contact-form/form-fields.tsx
```tsx
"use client"

import { Mail, MessageSquare, User } from "lucide-react"
import { FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import type { ContactFormData } from "./types"
import type { UseFormReturn } from "react-hook-form"

interface FormFieldsProps {
  form: UseFormReturn<ContactFormData>
}

export function FormFields({ form }: FormFieldsProps) {
  return (
    <>
      <FormField
        control={form.control}
        name="name"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Name</FormLabel>
            <FormControl>
              <div className="relative">
                <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input className="pl-9" placeholder="Your name" {...field} />
              </div>
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        control={form.control}
        name="email"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Email</FormLabel>
            <FormControl>
              <div className="relative">
                <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input className="pl-9" placeholder="your@email.com" {...field} />
              </div>
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        control={form.control}
        name="message"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Message</FormLabel>
            <FormControl>
              <div className="relative">
                <MessageSquare className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Textarea 
                  className="pl-9 min-h-[150px]" 
                  placeholder="Tell us about your project..."
                  {...field} 
                />
              </div>
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </>
  )
}
```

File: client/src/components/checkout/order-summary/order-item.tsx
```tsx
interface OrderItemProps {
  name: string
  quantity: number
  price: number
}

export function OrderItem({ name, quantity, price }: OrderItemProps) {
  return (
    <div className="flex justify-between">
      <div>
        <p className="font-medium">{name}</p>
        <p className="text-sm text-muted-foreground">
          Quantity: {quantity}
        </p>
      </div>
      <p className="font-medium">
        ${(price * quantity).toFixed(2)}
      </p>
    </div>
  )
}
```

File: client/src/components/contact/contact-form/index.tsx
```tsx
"use client"

import { motion } from "framer-motion"
import { Form } from "@/components/ui/form"
import { FormFields } from "./form-fields"
import { FormSubmit } from "./form-submit"
import { useContactForm } from "./use-contact-form"

export function ContactForm() {
  const { form, isSubmitting, onSubmit } = useContactForm()

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="max-w-2xl mx-auto"
    >
      <div className="rounded-lg border bg-card p-8">
        <Form {...form}>
          <form onSubmit={onSubmit} className="space-y-6">
            <FormFields form={form} />
            <FormSubmit isSubmitting={isSubmitting} />
          </form>
        </Form>
      </div>
    </motion.div>
  )
}
```

File: client/src/components/contact/contact-form/form-submit.tsx
```tsx
"use client"

import { Button } from "@/components/ui/button"
import { Loader2, Send } from "lucide-react"

interface FormSubmitProps {
  isSubmitting: boolean
}

export function FormSubmit({ isSubmitting }: FormSubmitProps) {
  return (
    <Button type="submit" className="w-full" disabled={isSubmitting}>
      {isSubmitting ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          Sending...
        </>
      ) : (
        <>
          <Send className="mr-2 h-4 w-4" />
          Send Message
        </>
      )}
    </Button>
  )
}
```

File: client/src/components/contact/contact-form/types.ts
```ts
import { z } from "zod"

export const contactFormSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Please enter a valid email address"),
  message: z.string().min(10, "Message must be at least 10 characters"),
})

export type ContactFormData = z.infer<typeof contactFormSchema>
```

File: client/src/components/footer/index.tsx
```tsx
import { Facebook, Twitter, Instagram, Youtube } from "lucide-react"
import { Button } from "@/components/ui/button"

export function Footer() {
  return (
    <footer className="border-t">
      <div className="mx-auto max-w-7xl px-6 py-12 md:flex md:items-center md:justify-between lg:px-8">
        <div className="flex justify-center space-x-6 md:order-2">
          <Button variant="ghost" size="icon">
            <Facebook className="h-5 w-5" />
          </Button>
          <Button variant="ghost" size="icon">
            <Instagram className="h-5 w-5" />
          </Button>
          <Button variant="ghost" size="icon">
            <Twitter className="h-5 w-5" />
          </Button>
          <Button variant="ghost" size="icon">
            <Youtube className="h-5 w-5" />
          </Button>
        </div>
        <div className="mt-8 md:order-1 md:mt-0">
          <p className="text-center text-xs leading-5 text-muted-foreground">
            &copy; {new Date().getFullYear()} Astralis. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  )
}
```

File: client/src/components/header/index.tsx
```tsx
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import { Menu, User, Bell, LogOut, Settings } from 'lucide-react';
import { ModeToggle } from '../mode-toggle';
import { Badge } from '../ui/badge';
import { cn } from '@/lib/utils';
import { useState } from 'react';

interface HeaderProps {
  user?: {
    name: string;
    email: string;
    avatar: string;
  };
  isAuthenticated?: boolean;
  notifications?: Array<{ id: number; message: string }>;
  unreadCount?: number;
  isLoading?: boolean;
}

export function Header({
  user,
  isAuthenticated = false,
  notifications = [],
  unreadCount = 0,
  isLoading = false,
}: HeaderProps) {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  const navigation = [
    { name: 'Home', href: '/' },
    { name: 'Blog', href: '/blog' },
    { name: 'Marketplace', href: '/marketplace' },
    { name: 'Contact', href: '/contact' },
  ];

  const userNavigation = [
    { name: 'Profile', href: '/profile', icon: User },
    { name: 'Settings', href: '/settings', icon: Settings },
    { name: 'Sign out', href: '/logout', icon: LogOut },
  ];

  if (isLoading) {
    return (
      <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-14 items-center animate-pulse">
          <div className="h-6 w-24 bg-muted rounded" />
        </div>
      </header>
    );
  }

  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-14 items-center">
        <div className="mr-4 hidden md:flex">
          <Link to="/" className="mr-6 flex items-center space-x-2">
            <span className="hidden font-bold sm:inline-block">
              Astralis Agency
            </span>
          </Link>
          <nav className="flex items-center space-x-6 text-sm font-medium">
            {navigation.map((item) => (
              <Link
                key={item.href}
                to={item.href}
                className={cn(
                  "transition-colors hover:text-foreground/80",
                  window.location.pathname === item.href
                    ? "text-foreground"
                    : "text-foreground/60"
                )}
              >
                {item.name}
              </Link>
            ))}
          </nav>
        </div>

        <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
          <SheetTrigger asChild>
            <Button
              variant="ghost"
              className="mr-2 px-0 text-base hover:bg-transparent focus-visible:bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 md:hidden"
            >
              <Menu className="h-6 w-6" />
              <span className="sr-only">Toggle Menu</span>
            </Button>
          </SheetTrigger>
          <SheetContent side="left" className="pr-0">
            <nav className="grid gap-2">
              {navigation.map((item) => (
                <Link
                  key={item.href}
                  to={item.href}
                  className="flex w-full items-center py-2 text-sm font-medium"
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  {item.name}
                </Link>
              ))}
            </nav>
          </SheetContent>
        </Sheet>

        <div className="flex flex-1 items-center justify-between space-x-2 md:justify-end">
          <div className="w-full flex-1 md:w-auto md:flex-none">
            {/* Add search functionality here if needed */}
          </div>
          <nav className="flex items-center space-x-2">
            {isAuthenticated && notifications.length > 0 && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon" className="relative">
                    <Bell className="h-4 w-4" />
                    {unreadCount > 0 && (
                      <Badge
                        variant="destructive"
                        className="absolute -right-1 -top-1 h-4 w-4 rounded-full p-0 text-xs"
                      >
                        {unreadCount}
                      </Badge>
                    )}
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-[300px]">
                  <DropdownMenuLabel>Notifications</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  {notifications.map((notification) => (
                    <DropdownMenuItem key={notification.id}>
                      {notification.message}
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            )}

            <ModeToggle />

            {isAuthenticated && user ? (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="ghost"
                    className="relative h-8 w-8 rounded-full"
                  >
                    <Avatar className="h-8 w-8">
                      <AvatarImage src={user.avatar} alt={user.name} />
                      <AvatarFallback>
                        {user.name
                          .split(' ')
                          .map((n) => n[0])
                          .join('')}
                      </AvatarFallback>
                    </Avatar>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuLabel className="font-normal">
                    <div className="flex flex-col space-y-1">
                      <p className="text-sm font-medium leading-none">
                        {user.name}
                      </p>
                      <p className="text-xs leading-none text-muted-foreground">
                        {user.email}
                      </p>
                    </div>
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  {userNavigation.map((item) => (
                    <DropdownMenuItem key={item.href} asChild>
                      <Link
                        to={item.href}
                        className="flex items-center justify-between"
                      >
                        <span>{item.name}</span>
                        <item.icon className="h-4 w-4" />
                      </Link>
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            ) : (
              <Button asChild variant="default" size="sm">
                <Link to="/login">Sign In</Link>
              </Button>
            )}
          </nav>
        </div>
      </div>
    </header>
  );
} 
```

File: client/src/components/contact/contact-form/use-contact-form.ts
```ts
"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { useToast } from "@/components/ui/use-toast"
import { contactFormSchema, type ContactFormData } from "./types"

export function useContactForm() {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const { toast } = useToast()

  const form = useForm<ContactFormData>({
    resolver: zodResolver(contactFormSchema),
    defaultValues: {
      name: "",
      email: "",
      message: "",
    },
  })

  async function onSubmit(values: ContactFormData) {
    setIsSubmitting(true)
    console.log('TODO: Send message to server', JSON.stringify(values))
    alert('TODO: Send message to server');
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      toast({
        title: "Message sent!",
        description: "We'll get back to you as soon as possible.",
      })
      
      form.reset()
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to send message. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  return {
    form,
    isSubmitting,
    onSubmit: form.handleSubmit(onSubmit),
  }
}
```

File: client/src/components/marketplace/product-grid/index.tsx
```tsx
"use client"

import { products } from "@/lib/marketplace"
import { ProductCard } from "./product-card"

export function ProductGrid() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {products.map((product, index) => (
        <ProductCard key={product.id} product={product} index={index} />
      ))}
    </div>
  )
}
```

File: client/src/components/marketplace/product-grid/product-card.tsx
```tsx
"use client"

import { motion } from "framer-motion"
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { ShoppingCart } from "lucide-react"
import { useCart } from "@/lib/store"
import { useToast } from "@/lib/hooks"
import type { Product } from "@/lib/marketplace"

interface ProductCardProps {
  product: Product
  index: number
}

export function ProductCard({ product, index }: ProductCardProps) {
  const addItem = useCart((state) => state.addItem)
  const { toast } = useToast()

  const handleAddToCart = () => {
    addItem({
      id: product.id,
      name: product.name,
      price: product.price,
      image: product.image,
      quantity: 1
    })
    toast({
      title: "Added to cart",
      description: `${product.name} has been added to your cart.`,
    })
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4, delay: index * 0.1 }}
    >
      <Card className="group overflow-hidden">
        <CardHeader className="p-0">
          <div className="aspect-[4/3] overflow-hidden">
            <img
              src={product.image}
              alt={product.name}
              className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
            />
          </div>
        </CardHeader>
        <CardContent className="p-6">
          <Badge className="mb-2">{product.category}</Badge>
          <h3 className="text-lg font-semibold mb-2">{product.name}</h3>
          <p className="text-muted-foreground line-clamp-2">
            {product.description}
          </p>
        </CardContent>
        <CardFooter className="p-6 pt-0 flex items-center justify-between">
          <span className="text-lg font-bold">
            ${product.price.toFixed(2)}
          </span>
          <Button size="sm" onClick={handleAddToCart}>
            <ShoppingCart className="w-4 h-4 mr-2" />
            Add to Cart
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  )
}
```

File: client/src/components/navbar/index.tsx
```tsx
"use client"

import { Link } from "react-router-dom"
import { useLocation } from "react-router-dom"
import { Menu } from "lucide-react"
import { Button } from "@/components/ui/button"
import {
  Sheet,
  SheetContent,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet"
import { cn } from "@/lib/utils"
import { CartSheet } from "@/components/cart/cart-sheet"

const routes = [
  {
    href: "/",
    label: "Home",
  },
  {
    href: "/marketplace",
    label: "Marketplace",
  },
  {
    href: "/blog",
    label: "Blog",
  },
  {
    href: "/contact",
    label: "Contact",
  },
]

export function Navbar() {
  const location = useLocation()

  return (
    <header className="py-6 px-4 border-b border-muted/20">
      <div className="container mx-auto flex items-center justify-between">
        <div className="flex items-center gap-8">
          <Link to="/" className="text-2xl font-bold text-primary">
            ASTRALIS
          </Link>
          <nav className="hidden md:flex items-center space-x-8">
            {routes.map((route) => (
              <Link
                key={route.href}
                to={route.href}
                className={cn(
                  "text-sm font-medium transition-colors hover:text-primary",
                  route.href === location.pathname ? "text-primary" : "text-muted-foreground"
                )}
              >
                {route.label}
              </Link>
            ))}
          </nav>
        </div>
        <div className="flex items-center gap-4">
          <CartSheet />
          <Sheet>
            <SheetTrigger asChild>
              <Button variant="ghost" size="icon" className="md:hidden">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="right" className="w-[300px] bg-card">
              <SheetTitle>Menu</SheetTitle>
              <nav className="flex flex-col gap-4 mt-8">
                {routes.map((route) => (
                  <Link
                    key={route.href}
                    to={route.href}
                    className={cn(
                      "text-sm font-medium transition-colors hover:text-primary p-2",
                      route.href === location.pathname ? "text-primary" : "text-muted-foreground"
                    )}
                  >
                    {route.label}
                  </Link>
                ))}
              </nav>
            </SheetContent>
          </Sheet>
        </div>
      </div>
    </header>
  )
}
```

File: client/src/components/providers/payment/index.ts
```ts
export * from "./paypal-provider"
```

File: client/src/components/providers/index.tsx
```tsx
"use client";

import { ThemeProvider } from "./theme-provider";
import { PayPalProvider } from "./payment/paypal-provider";

interface ProvidersProps {
  children: React.ReactNode;
}

export function Providers({ children }: ProvidersProps) {
  return (
    <ThemeProvider defaultTheme="dark" storageKey="nicol-theme">
      <PayPalProvider>{children}</PayPalProvider>
    </ThemeProvider>
  );
}

```

File: client/src/components/providers/payment/paypal-provider.tsx
```tsx
"use client"

import { PayPalScriptProvider } from "@paypal/react-paypal-js"
import { getPayPalOptions } from "@/lib/payment/paypal"

interface PayPalProviderProps {
  children: React.ReactNode
}

export function PayPalProvider({ children }: PayPalProviderProps) {
  return (
    <PayPalScriptProvider options={getPayPalOptions()}>
      {children}
    </PayPalScriptProvider>
  )
}
```

File: client/src/components/providers/theme-provider.tsx
```tsx
"use client"

import { createContext, useContext, useEffect, useState } from "react"

type Theme = "dark" | "light" | "system"

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider")

  return context
}
```

File: client/src/components/sections/cta/index.tsx
```tsx
"use client"

import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { ArrowRight } from "lucide-react"

export function CTASection() {
  return (
    <section className="container mx-auto px-4 py-12">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        transition={{ duration: 0.5 }}
        className="relative rounded-3xl overflow-hidden"
      >
        <div className="absolute inset-0">
          <div className="absolute inset-0 bg-gradient-to-r from-primary to-primary/50 mix-blend-multiply" />
          <img
            src="https://images.unsplash.com/photo-1521737604893-d14cc237f11d?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80"
            alt="Team collaboration"
            className="h-full w-full object-cover"
          />
        </div>
        <div className="relative px-6 py-24 sm:px-12 sm:py-32 lg:px-16">
          <div className="mx-auto max-w-2xl text-center">
            <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl">
              Ready to transform your digital presence?
            </h2>
            <p className="mx-auto mt-6 max-w-xl text-lg text-gray-200">
              Let's collaborate to create something extraordinary. Our team is ready to bring your vision to life.
            </p>
            <div className="mt-10 flex justify-center gap-x-6">
              <Button size="lg" variant="secondary" className="gap-2">
                Get started today <ArrowRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      </motion.div>
    </section>
  )
}
```

File: client/src/components/sections/hero/hero-actions.tsx
```tsx
"use client"

import { Button } from "@/components/ui/button"
import { ArrowRight } from "lucide-react"

export function HeroActions() {
  return (
    <div className="mt-10 flex items-center justify-center gap-x-6">
      <Button size="lg" className="gap-2">
        Get started <ArrowRight className="h-4 w-4" />
      </Button>
      <Button variant="ghost" size="lg">
        Learn more
      </Button>
    </div>
  )
}
```

File: client/src/components/sections/hero/hero-title.tsx
```tsx
"use client"

import { motion } from "framer-motion"

export function HeroTitle() {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <h1 className="text-4xl font-bold tracking-tight sm:text-6xl bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent">
        Creative solutions for modern brands
      </h1>
      <p className="mt-6 text-lg leading-8 text-muted-foreground">
        We craft digital experiences that inspire, engage, and deliver exceptional results. 
        Our team of experts brings your vision to life with cutting-edge technology and design.
      </p>
    </motion.div>
  )
}
```

File: client/src/components/sections/hero/index.tsx
```tsx
"use client"

import { HeroTitle } from "./hero-title"
import { HeroImage } from "./hero-image"
import { HeroActions } from "./hero-actions"

export function HeroSection() {
  return (
    <div className="relative overflow-hidden bg-background pt-14">
      <div className="absolute inset-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:4rem_4rem] [mask-image:radial-gradient(ellipse_60%_50%_at_50%_0%,#000_70%,transparent_110%)]" />
      <div className="relative">
        <div className="mx-auto max-w-7xl px-6 lg:px-8">
          <div className="mx-auto max-w-2xl text-center">
            <div className="mb-8 flex justify-center">
              <div className="relative rounded-full px-3 py-1 text-sm leading-6 text-muted-foreground ring-1 ring-gray-900/10 hover:ring-gray-900/20">
                Announcing our next round of products.{' '}
                <a href="/shop" className="font-semibold text-primary">
                  <span className="absolute inset-0" aria-hidden="true" />
                  See all <span aria-hidden="true">&rarr;</span>
                </a>
              </div>
            </div>
            <HeroTitle />
            <HeroActions />
          </div>
          <HeroImage />
        </div>
      </div>
    </div>
  )
}
```

File: client/src/components/sections/portfolio/index.tsx
```tsx
"use client"

import { PortfolioCard } from "./portfolio-card"

const projects = [
  {
    title: "Neon Brand Identity",
    category: "Branding",
    image: "https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
  },
  {
    title: "Tech E-commerce Platform",
    category: "Web Development",
    image: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
  },
  {
    title: "Mobile Banking App",
    category: "App Development",
    image: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
  },
  {
    title: "Social Media Campaign",
    category: "Marketing",
    image: "https://images.unsplash.com/photo-1551434678-e076c223a692?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
  },
]

export function PortfolioSection() {
  return (
    <section className="container mx-auto px-4 py-12">
      <div className="text-center mb-12">
        <h2 className="text-3xl font-bold mb-4">Our Work</h2>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Explore our latest projects and see how we've helped businesses achieve their goals.
        </p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {projects.map((project, index) => (
          <PortfolioCard key={project.title} {...project} index={index} />
        ))}
      </div>
    </section>
  )
}
```

File: client/src/components/sections/services/index.tsx
```tsx
"use client"

import { Globe, ShoppingBag, Paintbrush, Smartphone } from "lucide-react"
import { ServiceCard } from "./service-card"

const services = [
  {
    title: "Web Design",
    description: "Beautiful, responsive websites that engage your audience and drive results.",
    icon: Globe,
  },
  {
    title: "Digital Marketing",
    description: "Strategic marketing solutions to grow your brand and reach new customers.",
    icon: ShoppingBag,
  },
  {
    title: "Brand Identity",
    description: "Distinctive brand designs that make your business stand out from the competition.",
    icon: Paintbrush,
  },
  {
    title: "Mobile Apps",
    description: "Native and cross-platform mobile applications for iOS and Android.",
    icon: Smartphone,
  },
]

export function ServicesSection() {
  return (
    <section className="container mx-auto px-4 py-12">
      <div className="text-center mb-12">
        <h2 className="text-3xl font-bold mb-4">Our Services</h2>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          We offer a comprehensive range of digital services to help your business thrive in the modern world.
        </p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {services.map((service, index) => (
          <ServiceCard key={service.title} {...service} index={index} />
        ))}
      </div>
    </section>
  )
}
```

File: client/src/components/sections/portfolio/portfolio-card.tsx
```tsx
"use client"

import { motion } from "framer-motion"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"

interface PortfolioCardProps {
  title: string
  category: string
  image: string
  index: number
}

export function PortfolioCard({ title, category, image, index }: PortfolioCardProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
    >
      <Card className="group cursor-pointer overflow-hidden">
        <CardContent className="p-0 relative">
          <div className="relative overflow-hidden aspect-video">
            <img
              src={image}
              alt={title}
              className="object-cover w-full h-full transform transition-transform duration-300 group-hover:scale-105"
            />
          </div>
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <div className="absolute bottom-0 left-0 right-0 p-6">
              <Badge className="mb-2">{category}</Badge>
              <h3 className="text-xl font-semibold text-white">{title}</h3>
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  )
}
```

File: client/src/components/sections/hero/hero-image.tsx
```tsx
"use client"

import { motion } from "framer-motion"

export function HeroImage() {
  return (
    <motion.div
      initial={{ opacity: 0, y: 100 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.8, delay: 0.2 }}
      className="mt-16 flow-root sm:mt-24"
    >
      <div className="relative -m-2 rounded-xl bg-gray-900/5 p-2 ring-1 ring-inset ring-gray-900/10 lg:-m-4 lg:rounded-2xl lg:p-4">
        <img
          src="https://images.unsplash.com/photo-1498050108023-c5249f4df085?ixlib=rb-4.0.3&auto=format&fit=crop&w=2072&q=80"
          alt="App screenshot"
          className="rounded-md shadow-2xl ring-1 ring-gray-900/10"
        />
      </div>
    </motion.div>
  )
}
```

File: client/src/components/sections/services/service-card.tsx
```tsx
"use client"

import { motion } from "framer-motion"
import { LucideIcon } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

interface ServiceCardProps {
  title: string
  description: string
  icon: LucideIcon
  index: number
}

export function ServiceCard({ title, description, icon: Icon, index }: ServiceCardProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
    >
      <Card className="relative group hover:shadow-lg transition-all duration-300 overflow-hidden">
        <CardHeader>
          <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4">
            <Icon className="w-6 h-6 text-primary" />
          </div>
          <CardTitle>{title}</CardTitle>
          <CardDescription>{description}</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center text-primary">
            <span className="text-sm font-medium">Learn more</span>
            <Icon className="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" />
          </div>
        </CardContent>
      </Card>
    </motion.div>
  )
}
```

File: client/src/components/ui/accordion.tsx
```tsx
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
```

File: client/src/components/sections/testimonials/testimonial-card.tsx
```tsx
"use client"

import { motion } from "framer-motion"
import { Card, CardContent } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Star } from "lucide-react"

interface TestimonialCardProps {
  name: string
  role: string
  content: string
  avatar: string
  index: number
}

export function TestimonialCard({ name, role, content, avatar, index }: TestimonialCardProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
    >
      <Card className="h-full">
        <CardContent className="p-6">
          <div className="flex mb-4">
            {[...Array(5)].map((_, i) => (
              <Star key={i} className="w-4 h-4 fill-primary text-primary" />
            ))}
          </div>
          <p className="text-muted-foreground mb-6">{content}</p>
          <div className="flex items-center">
            <Avatar className="h-10 w-10">
              <AvatarImage src={avatar} alt={name} />
              <AvatarFallback>{name[0]}</AvatarFallback>
            </Avatar>
            <div className="ml-4">
              <p className="text-sm font-semibold">{name}</p>
              <p className="text-sm text-muted-foreground">{role}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  )
}
```

File: client/src/components/sections/testimonials/index.tsx
```tsx
"use client"

import { TestimonialCard } from "./testimonial-card"

const testimonials = [
  {
    name: "Sarah Johnson",
    role: "CEO at TechStart",
    content: "Working with Nicol has been transformative for our brand. Their attention to detail and creative solutions exceeded our expectations.",
    avatar: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80",
  },
  {
    name: "Michael Chen",
    role: "Marketing Director",
    content: "The team's expertise in digital marketing helped us achieve record-breaking growth. Highly recommended!",
    avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80",
  },
  {
    name: "Emily Davis",
    role: "Product Manager",
    content: "Their innovative approach to problem-solving and dedication to quality makes them stand out from the competition.",
    avatar: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80",
  },
]

export function TestimonialsSection() {
  return (
    <section className="container mx-auto px-4 py-12">
      <div className="text-center mb-12">
        <h2 className="text-3xl font-bold mb-4">What Our Clients Say</h2>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Don't just take our word for it - hear from some of our satisfied clients.
        </p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {testimonials.map((testimonial, index) => (
          <TestimonialCard key={testimonial.name} {...testimonial} index={index} />
        ))}
      </div>
    </section>
  )
}
```

File: client/src/components/ui/alert-dialog.tsx
```tsx
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  HTMLButtonElement,
  React.ButtonHTMLAttributes<HTMLButtonElement>
>(({ className, ...props }, ref) => (
  <button
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = "AlertDialogAction"

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
```

File: client/src/components/ui/alert.tsx
```tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
```

File: client/src/components/ui/card.tsx
```tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
```

File: client/src/components/ui/avatar.tsx
```tsx
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"
import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
```

File: client/src/components/ui/badge.tsx
```tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
```

File: client/src/components/ui/dropdown-menu.tsx
```tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"
import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root
const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
const DropdownMenuGroup = DropdownMenuPrimitive.Group
const DropdownMenuPortal = DropdownMenuPrimitive.Portal
const DropdownMenuSub = DropdownMenuPrimitive.Sub
const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
```

File: client/src/components/ui/aspect-ratio.tsx
```tsx
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
```

File: client/src/components/ui/hover-card.tsx
```tsx
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"
import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root
const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
```

File: client/src/components/ui/form.tsx
```tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
```

File: client/src/components/ui/button.tsx
```tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
```

File: client/src/components/ui/dialog.tsx
```tsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root
const DialogTrigger = DialogPrimitive.Trigger
const DialogPortal = DialogPrimitive.Portal
const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
```

File: client/src/components/ui/input.tsx
```tsx
import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
```

File: client/src/components/ui/label.tsx
```tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
```

File: client/src/components/ui/navigation-menu.tsx
```tsx
"use client"

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
```

File: client/src/components/ui/table.tsx
```tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
```

File: client/src/components/ui/scroll-area.tsx
```tsx
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
```

File: client/src/components/ui/textarea.tsx
```tsx
import * as React from "react"
import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
```

File: client/src/components/ui/toast.tsx
```tsx
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
```

File: client/src/components/ui/toaster.tsx
```tsx
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
```

File: client/src/components/ui/sheet.tsx
```tsx
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root
const SheetTrigger = SheetPrimitive.Trigger
const SheetClose = SheetPrimitive.Close
const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
```

File: client/src/components/ui/use-toast.ts
```ts
import * as React from "react"
import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
```

File: client/src/hooks/index.ts
```ts
export * from "./use-toast"
export * from "./use-mount"
export * from "./use-lock-body"
```

File: client/src/components/mode-toggle.tsx
```tsx
import { Moon, Sun } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useTheme } from "./providers/theme-provider";

export function ModeToggle() {
  const { setTheme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
} 
```

File: client/src/hooks/use-lock-body.ts
```ts
import { useEffect } from "react"

export function useLockBody() {
  useEffect(() => {
    const originalStyle = window.getComputedStyle(document.body).overflow
    document.body.style.overflow = "hidden"

    return () => {
      document.body.style.overflow = originalStyle
    }
  }, [])
}
```

File: client/src/hooks/use-mount.ts
```ts
import { useEffect, useState } from "react"

export function useMount() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  return mounted
}
```

File: client/src/hooks/use-toast.ts
```ts
import { useToast as useToastOriginal } from "@/components/ui/use-toast"

export const useToast = () => {
  return useToastOriginal()
}
```

File: client/src/lib/blog/data/authors.ts
```ts
import type { Author } from "../types"

export const authors: Record<string, Author> = {
  davidKim: {
    name: "David Kim",
    role: "AI Design Specialist",
    avatar: "https://images.unsplash.com/photo-1539571696357-5a69c17a67c6?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
  },
  emmaGreen: {
    name: "Emma Green",
    role: "Sustainability Design Lead",
    avatar: "https://images.unsplash.com/photo-1487412720507-e7ab37603c6f?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
  },
  jamesWilson: {
    name: "James Wilson",
    role: "Mobile UX Expert",
    avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
  },
  sophiaChen: {
    name: "Sophia Chen",
    role: "UX Psychology Researcher",
    avatar: "https://images.unsplash.com/photo-1534528741775-53994a69daeb?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
  },
  alexRodriguez: {
    name: "Alex Rodriguez",
    role: "Frontend Architecture Lead",
    avatar: "https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
  },
  linaKumar: {
    name: "Lina Kumar",
    role: "Design Systems Engineer",
    avatar: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
  },
  marcusThompson: {
    name: "Marcus Thompson",
    role: "Performance Optimization Expert",
    avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
  }
}
```

File: client/src/components/ui/separator.tsx
```tsx
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"
import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
```

File: client/src/lib/blog/data/posts.ts
```ts
import { authors } from "./authors"
import type { BlogPost } from "../types"

export const blogPosts: BlogPost[] = [
  // Previous posts remain unchanged (1-13)
  {
    id: 14,
    title: "Design Systems: From Theory to Implementation",
    excerpt: "A comprehensive guide to building and maintaining effective design systems.",
    content: `Design systems have become essential for maintaining consistency and efficiency in modern web development. This guide explores the key aspects of creating and implementing a successful design system.

    A well-structured design system consists of several key components: design tokens, components, patterns, and documentation. Each element plays a crucial role in creating a cohesive user experience across different platforms and applications.

    Design tokens form the foundation of a design system, defining fundamental values like colors, typography, spacing, and other visual properties. These tokens ensure consistency and make it easier to maintain and update the system.

    Component architecture requires careful consideration of reusability, flexibility, and maintainability. Modern approaches favor composition over inheritance, allowing for more flexible and maintainable component libraries.`,
    date: "March 14, 2024",
    readTime: "13 min read",
    category: "Design Systems",
    image: "https://images.unsplash.com/photo-1561883088-039e53143d73?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: authors.linaKumar
  },
  {
    id: 15,
    title: "Performance Optimization Techniques for Modern Web Apps",
    excerpt: "Advanced strategies for optimizing web application performance.",
    content: `Web performance optimization has become increasingly important as applications grow in complexity. This guide covers advanced techniques for improving application speed and user experience.

    Modern performance optimization goes beyond basic techniques, incorporating advanced strategies like module federation, tree shaking, and smart bundling. Understanding these concepts is crucial for building high-performance applications.

    Image optimization remains a critical aspect of web performance. Modern formats like WebP and AVIF, combined with responsive loading strategies, can significantly improve loading times while maintaining quality.

    JavaScript performance optimization requires a multi-faceted approach, including code splitting, lazy loading, and careful management of third-party dependencies. Understanding browser rendering and JavaScript execution is key to effective optimization.`,
    date: "March 13, 2024",
    readTime: "16 min read",
    category: "Performance",
    image: "https://images.unsplash.com/photo-1551434678-e076c223a692?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: authors.marcusThompson
  },
  {
    id: 16,
    title: "Accessibility in Modern Web Applications",
    excerpt: "Essential practices for building inclusive web experiences.",
    content: `Web accessibility is not just a legal requirement but a fundamental aspect of good web design. This guide explores modern approaches to creating accessible web applications.

    ARIA attributes and semantic HTML form the foundation of accessible web applications. Understanding their proper usage is crucial for creating truly inclusive experiences.

    Keyboard navigation and focus management are essential aspects of web accessibility. Modern applications must provide robust keyboard support and clear focus indicators.

    Color contrast and typography play crucial roles in accessibility. Understanding WCAG guidelines and implementing them effectively ensures content is readable for all users.`,
    date: "March 12, 2024",
    readTime: "11 min read",
    category: "Accessibility",
    image: "https://images.unsplash.com/photo-1551434678-e076c223a692?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: authors.sophiaChen
  },
  {
    id: 17,
    title: "State Management Patterns in React Applications",
    excerpt: "Modern approaches to managing state in React applications.",
    content: `State management continues to evolve in the React ecosystem. This article explores modern patterns and best practices for managing application state effectively.

    The trend towards simpler state management solutions has led to new patterns and tools. Understanding when to use local state, context, or external state management libraries is crucial.

    Server state management has become increasingly important with the rise of real-time applications. Tools like React Query and SWR have changed how we think about data fetching and caching.

    State persistence and hydration patterns are crucial for modern applications. Understanding these concepts helps create more resilient and user-friendly applications.`,
    date: "March 11, 2024",
    readTime: "14 min read",
    category: "React",
    image: "https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: authors.alexRodriguez
  },
  {
    id: 18,
    title: "Building Micro-frontends: Architecture and Implementation",
    excerpt: "A detailed guide to implementing micro-frontend architecture.",
    content: `Micro-frontend architecture has gained popularity as a way to scale frontend development. This guide explores the benefits, challenges, and implementation strategies.

    Different approaches to micro-frontend implementation each have their trade-offs. Understanding these helps in choosing the right approach for your specific needs.

    Module federation has become a key enabler for micro-frontends. Understanding its capabilities and limitations is crucial for successful implementation.

    Runtime integration patterns require careful consideration of performance and user experience. This includes strategies for loading and communicating between micro-frontends.`,
    date: "March 10, 2024",
    readTime: "17 min read",
    category: "Architecture",
    image: "https://images.unsplash.com/photo-1558655146-9f40138edfeb?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: authors.alexRodriguez
  },
  {
    id: 19,
    title: "CSS Architecture for Large-Scale Applications",
    excerpt: "Best practices for organizing and scaling CSS in large applications.",
    content: `CSS architecture becomes increasingly important as applications grow. This guide explores modern approaches to writing maintainable and scalable CSS.

    Modern CSS features like custom properties, container queries, and cascade layers have changed how we structure our stylesheets. Understanding these features is crucial for modern CSS architecture.

    CSS modules and CSS-in-JS solutions each have their place in modern applications. Understanding the trade-offs helps in choosing the right approach for your needs.

    Performance considerations in CSS architecture include strategies for code splitting, critical CSS, and managing specificity.`,
    date: "March 9, 2024",
    readTime: "12 min read",
    category: "CSS",
    image: "https://images.unsplash.com/photo-1507721999472-8ed4421c4af2?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: authors.linaKumar
  },
  {
    id: 20,
    title: "API Design Patterns for Modern Web Applications",
    excerpt: "Best practices for designing and implementing web APIs.",
    content: `Well-designed APIs are crucial for modern web applications. This guide explores patterns and practices for creating effective and maintainable APIs.

    RESTful API design principles remain relevant but have evolved with modern requirements. Understanding these evolution helps in creating more effective APIs.

    GraphQL has changed how we think about API design. Understanding its benefits and trade-offs is crucial for modern API development.

    API versioning and documentation are crucial for maintaining backwards compatibility while allowing for evolution. This includes strategies for managing breaking changes and maintaining documentation.`,
    date: "March 8, 2024",
    readTime: "15 min read",
    category: "API Design",
    image: "https://images.unsplash.com/photo-1516116216624-53e697fedbea?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: authors.marcusThompson
  }
]
```

File: client/src/lib/blog/index.ts
```ts
export * from "./types"
export * from "./data"
```

File: client/src/lib/blog/data.ts
```ts
import type { BlogPost } from "./types"

export const blogPosts: BlogPost[] = [
  // Existing posts...
  {
    id: 4,
    title: "The Future of AI in Design: Collaboration, Not Replacement",
    excerpt: "Exploring how artificial intelligence is enhancing creative workflows and empowering designers.",
    content: `The integration of AI in design has sparked both excitement and concern within the creative community. However, the reality is showing that AI is becoming a powerful collaborative tool rather than a replacement for human creativity.

    Today's AI-powered design tools are enhancing workflows by automating repetitive tasks, generating initial concepts, and providing data-driven insights into user preferences. This allows designers to focus more on strategic thinking and creative problem-solving.

    One of the most significant impacts of AI in design is in the prototyping phase. AI can now generate multiple variations of a design concept in seconds, allowing designers to explore more possibilities and iterate faster. This doesn't replace the designer's judgment but rather provides a broader foundation for creative exploration.

    The key to successful AI integration lies in understanding its role as an enhancer of human creativity rather than a substitute. Designers who embrace AI as a collaborative tool are finding new ways to push creative boundaries while maintaining the human touch that makes design truly impactful.`,
    date: "March 18, 2024",
    readTime: "6 min read",
    category: "Technology",
    image: "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: {
      name: "David Kim",
      role: "AI Design Specialist",
      avatar: "https://images.unsplash.com/photo-1539571696357-5a69c17a67c6?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
    }
  },
  {
    id: 5,
    title: "Sustainable Web Design: Building a Greener Digital Future",
    excerpt: "Learn how sustainable web design practices can reduce environmental impact while improving user experience.",
    content: `As the digital world continues to grow, so does its environmental impact. Sustainable web design is emerging as a crucial approach to creating digital products that are both user-friendly and environmentally conscious.

    The core principles of sustainable web design include optimizing image sizes, minimizing server requests, and choosing energy-efficient hosting providers. These practices not only reduce carbon emissions but also improve website performance and user experience.

    Color choices and dark mode implementations can significantly impact energy consumption, especially on OLED screens. By designing with sustainability in mind, we can create beautiful interfaces that consume less energy.

    Performance optimization is a key aspect of sustainable web design. Faster loading times mean less server processing time and reduced energy consumption. This includes techniques like lazy loading, efficient caching, and optimized code.

    The future of web design must balance aesthetic appeal with environmental responsibility. By adopting sustainable practices today, we can help build a greener digital future while delivering exceptional user experiences.`,
    date: "March 17, 2024",
    readTime: "7 min read",
    category: "Sustainability",
    image: "https://images.unsplash.com/photo-1497435334941-8c899ee9e8e9?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: {
      name: "Emma Green",
      role: "Sustainability Design Lead",
      avatar: "https://images.unsplash.com/photo-1487412720507-e7ab37603c6f?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
    }
  },
  {
    id: 6,
    title: "Mastering Mobile-First Design in 2024",
    excerpt: "Essential strategies and best practices for creating exceptional mobile-first digital experiences.",
    content: `Mobile-first design has evolved from a trend to a fundamental requirement in modern web development. As mobile devices continue to dominate internet usage, understanding and implementing effective mobile-first strategies is crucial for success.

    The key to mobile-first design lies in prioritizing content and functionality based on mobile user needs. This means focusing on essential features first and progressively enhancing the experience for larger screens.

    Performance optimization becomes even more critical in mobile-first design. Techniques like responsive images, efficient loading strategies, and touch-friendly interfaces are essential for creating smooth mobile experiences.

    Typography and spacing play crucial roles in mobile design. Careful consideration must be given to readability and touch target sizes to ensure comfortable user interaction on smaller screens.

    Testing across multiple devices and screen sizes remains a critical part of the mobile-first design process. Real-device testing provides insights that emulators alone cannot capture.`,
    date: "March 16, 2024",
    readTime: "9 min read",
    category: "Mobile Development",
    image: "https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: {
      name: "James Wilson",
      role: "Mobile UX Expert",
      avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
    }
  },
  {
    id: 7,
    title: "The Psychology of Color in Digital Design",
    excerpt: "Understanding how color choices influence user behavior and brand perception in digital spaces.",
    content: `Color psychology plays a crucial role in digital design, influencing user emotions, behaviors, and brand perceptions. Understanding these psychological impacts can help create more effective and engaging digital experiences.

    Different colors evoke different emotional responses. Blue often conveys trust and stability, making it popular among corporate websites. Red can create urgency or excitement, while green is associated with growth and environmental themes.

    Cultural context must be considered when choosing colors for global audiences. What works in one culture might have different or even negative connotations in another. This understanding is crucial for international brands and applications.

    Color accessibility is another vital consideration. Ensuring sufficient contrast ratios and providing alternatives for color-blind users helps create inclusive designs that work for everyone.

    The strategic use of color in calls-to-action, navigation elements, and branding can significantly impact user engagement and conversion rates. Testing different color combinations can help optimize these elements for better results.`,
    date: "March 14, 2024",
    readTime: "8 min read",
    category: "Design Psychology",
    image: "https://images.unsplash.com/photo-1550684376-efcbd6e3f031?ixlib=rb-4.0.3&auto=format&fit=crop&w=1740&q=80",
    author: {
      name: "Sophie Chen",
      role: "UX Psychology Researcher",
      avatar: "https://images.unsplash.com/photo-1534528741775-53994a69daeb?ixlib=rb-4.0.3&auto=format&fit=crop&w=256&q=80"
    }
  }
]
```

File: client/src/lib/blog/types.ts
```ts
export interface Author {
  name: string
  role: string
  avatar: string
}

export interface BlogPost {
  id: number
  title: string
  excerpt: string
  content: string
  date: string
  readTime: string
  category: string
  image: string
  author: Author
}
```

File: client/src/lib/blog/data/index.ts
```ts
export * from "./posts"
export * from "./authors"
```

File: client/src/lib/hooks/index.ts
```ts
export * from "./use-mount"
export * from "./use-toast"
export * from "./use-lock-body"
```

File: client/src/lib/config/payment.ts
```ts
// Default test client ID from PayPal documentation
const TEST_CLIENT_ID = "sb"

export const PAYPAL_CONFIG = {
  clientId: import.meta.env.VITE_PAYPAL_CLIENT_ID || TEST_CLIENT_ID,
  currency: "USD",
  intent: "capture"
} as const

export const STRIPE_CONFIG = {
  publishableKey: import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || "",
} as const
```

File: client/src/lib/hooks/use-toast.ts
```ts
import { useToast as useToastOriginal } from "@/components/ui/use-toast"

export const useToast = () => {
  return useToastOriginal()
}
```

File: client/src/lib/hooks/use-mount.ts
```ts
import { useEffect, useState } from "react"

export function useMount() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  return mounted
}
```

File: client/src/lib/marketplace/data.ts
```ts
import type { Product } from "./types"

export const products: Product[] = [
  // Existing products
  {
    id: "1",
    name: "Premium Agency T-Shirt",
    description: "Premium cotton T-shirt with our minimalist logo. Available in black, white, and dark red.",
    price: 25.00,
    category: "Branded Merchandise",
    image: "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=800&auto=format&fit=crop&q=60"
  },
  {
    id: "2",
    name: "UI/UX Design Kit",
    description: "Comprehensive UI/UX design kit with components for web and mobile applications.",
    price: 49.99,
    category: "Digital Design Assets",
    image: "https://images.unsplash.com/photo-1581291518633-83b4ebd1d83e?w=800&auto=format&fit=crop&q=60"
  },
  {
    id: "3",
    name: "Design Basics Course",
    description: "Learn design fundamentals through practical exercises and real-world projects.",
    price: 79.99,
    category: "Educational Products",
    image: "https://images.unsplash.com/photo-1434030216411-0b793f4b4173?w=800&auto=format&fit=crop&q=60"
  },

  // New Digital Design Assets
  {
    id: "4",
    name: "Icon Master Pack",
    description: "Over 1000 customizable vector icons in multiple styles and formats. Perfect for any design project.",
    price: 39.99,
    category: "Digital Design Assets",
    image: "https://images.unsplash.com/photo-1611162616305-c69b3fa7fbe0?w=800&auto=format&fit=crop&q=60"
  },
  {
    id: "5",
    name: "Social Media Template Bundle",
    description: "200+ editable social media templates for Instagram, Facebook, and LinkedIn. Boost your social presence.",
    price: 59.99,
    category: "Digital Design Assets",
    image: "https://images.unsplash.com/photo-1611162618071-b39a2ec055fb?w=800&auto=format&fit=crop&q=60"
  },
  {
    id: "6",
    name: "3D Illustration Pack",
    description: "Modern 3D illustrations for websites and applications. Fully customizable in Blender.",
    price: 89.99,
    category: "Digital Design Assets",
    image: "https://images.unsplash.com/photo-1626785774573-4b799315345d?w=800&auto=format&fit=crop&q=60"
  },

  // New Educational Products
  {
    id: "7",
    name: "Advanced UI Animation Course",
    description: "Master the art of UI animation with After Effects and Lottie. Includes 20+ practical projects.",
    price: 129.99,
    category: "Educational Products",
    image: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=800&auto=format&fit=crop&q=60"
  },
  {
    id: "8",
    name: "Web Development Masterclass",
    description: "Comprehensive course covering modern web development with React, Node.js, and more.",
    price: 199.99,
    category: "Educational Products",
    image: "https://images.unsplash.com/photo-1517180102446-f3ece451e9d8?w=800&auto=format&fit=crop&q=60"
  },
  {
    id: "9",
    name: "Digital Marketing Guide 2024",
    description: "Up-to-date strategies and tactics for digital marketing success. Includes case studies.",
    price: 49.99,
    category: "Educational Products",
    image: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&auto=format&fit=crop&q=60"
  },

  // New Design Services
  {
    id: "10",
    name: "Custom Logo Design",
    description: "Professional logo design service including 3 concepts and unlimited revisions.",
    price: 299.99,
    category: "Design Services",
    image: "https://images.unsplash.com/photo-1626785774625-ddcddc3445e9?w=800&auto=format&fit=crop&q=60"
  },
  {
    id: "11",
    name: "Website UI Audit",
    description: "Comprehensive UI/UX audit of your website with detailed improvement recommendations.",
    price: 149.99,
    category: "Design Services",
    image: "https://images.unsplash.com/photo-1507238691740-187a5b1d37b8?w=800&auto=format&fit=crop&q=60"
  },
  {
    id: "12",
    name: "Brand Identity Package",
    description: "Complete brand identity design including logo, style guide, and basic marketing materials.",
    price: 499.99,
    category: "Design Services",
    image: "https://images.unsplash.com/photo-1434626881859-194d67b2b86f?w=800&auto=format&fit=crop&q=60"
  },

  // New Art & Photography
  {
    id: "13",
    name: "Urban Photography Collection",
    description: "25 high-resolution urban landscape photos perfect for websites and presentations.",
    price: 79.99,
    category: "Art & Photography",
    image: "https://images.unsplash.com/photo-1449824913935-59a10b8d2000?w=800&auto=format&fit=crop&q=60"
  },
  {
    id: "14",
    name: "Abstract Art Bundle",
    description: "Collection of 15 modern abstract artworks in various styles and formats.",
    price: 99.99,
    category: "Art & Photography",
    image: "https://images.unsplash.com/photo-1460999158988-6f0380f81f4d?w=800&auto=format&fit=crop&q=60"
  },
  {
    id: "15",
    name: "Product Photography Pack",
    description: "50 professional product photography templates and presets for Lightroom.",
    price: 69.99,
    category: "Art & Photography",
    image: "https://images.unsplash.com/photo-1542038784456-1ea8e935640e?w=800&auto=format&fit=crop&q=60"
  }
]
```

File: client/src/lib/marketplace/index.ts
```ts
export * from "./types"
export * from "./data"
```

File: client/src/lib/marketplace/types.ts
```ts
export interface Product {
  id: string
  name: string
  description: string
  price: number
  category: string
  image: string
}

export type ProductCategory = 
  | "All Products"
  | "Branded Merchandise"
  | "Digital Design Assets"
  | "Educational Products"
  | "Design Services"
  | "Art & Photography"
```

File: client/src/lib/hooks/use-lock-body.ts
```ts
import { useEffect } from "react"

export function useLockBody() {
  useEffect(() => {
    const originalStyle = window.getComputedStyle(document.body).overflow
    document.body.style.overflow = "hidden"

    return () => {
      document.body.style.overflow = originalStyle
    }
  }, [])
}
```

File: client/src/lib/payment/paypal.ts
```ts
import { ReactPayPalScriptOptions } from "@paypal/react-paypal-js"
import { PAYPAL_CONFIG } from "@/lib/config/payment"

export const getPayPalOptions = (): ReactPayPalScriptOptions => ({
  clientId: PAYPAL_CONFIG.clientId,
  currency: PAYPAL_CONFIG.currency,
  intent: PAYPAL_CONFIG.intent,
})
```

File: client/src/lib/store/cart.ts
```ts
import { create } from 'zustand'
import { persist } from 'zustand/middleware'

export interface CartItem {
  id: string
  name: string
  price: number
  image: string
  quantity: number
}

interface CartStore {
  items: CartItem[]
  total: number
  addItem: (item: CartItem) => void
  removeItem: (id: string) => void
  updateQuantity: (id: string, quantity: number) => void
  clearCart: () => void
}

export const useCart = create<CartStore>()(
  persist(
    (set) => ({
      items: [],
      total: 0,
      addItem: (item) => {
        set((state) => {
          const existingItem = state.items.find((i) => i.id === item.id)
          const items = existingItem
            ? state.items.map((i) =>
                i.id === item.id
                  ? { ...i, quantity: i.quantity + 1 }
                  : i
              )
            : [...state.items, { ...item, quantity: 1 }]
          return {
            items,
            total: items.reduce((acc, item) => acc + item.price * item.quantity, 0),
          }
        })
      },
      removeItem: (id) => {
        set((state) => {
          const items = state.items.filter((i) => i.id !== id)
          return {
            items,
            total: items.reduce((acc, item) => acc + item.price * item.quantity, 0),
          }
        })
      },
      updateQuantity: (id, quantity) => {
        set((state) => {
          const items = state.items.map((item) =>
            item.id === id ? { ...item, quantity } : item
          )
          return {
            items,
            total: items.reduce((acc, item) => acc + item.price * item.quantity, 0),
          }
        })
      },
      clearCart: () => {
        set({ items: [], total: 0 })
      },
    }),
    {
      name: 'cart-storage',
    }
  )
)
```

File: client/src/lib/payment/stripe.ts
```ts
import { loadStripe } from "@stripe/stripe-js"
import { STRIPE_CONFIG } from "@/lib/config/payment"

let stripePromise: ReturnType<typeof loadStripe>

export const getStripe = () => {
  if (!stripePromise && STRIPE_CONFIG.publishableKey) {
    stripePromise = loadStripe(STRIPE_CONFIG.publishableKey)
  }
  return stripePromise
}
```

File: client/src/lib/store/index.ts
```ts
export * from './cart'
```

File: client/src/lib/utils/format.ts
```ts
export const formatPrice = (price: number) => {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(price)
}

export const formatDate = (date: string) => {
  return new Date(date).toLocaleDateString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
  })
}
```

File: client/src/lib/utils/index.ts
```ts
export * from "./format"
export * from "./validation"
export * from "./cn"
```

File: client/src/lib/utils/cn.ts
```ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

File: client/src/lib/utils/validation.ts
```ts
export const isValidEmail = (email: string) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

export const isValidPhone = (phone: string) => {
  const phoneRegex = /^\+?[\d\s-]{10,}$/
  return phoneRegex.test(phone)
}
```

File: client/src/lib/api.ts
```ts
import axios from 'axios';

const api = axios.create({
  baseURL: '/api',
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add auth token to requests if available
api.interceptors.request.use((config:any) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default api;
```

File: client/src/lib/utils.ts
```ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

File: client/src/pages/blog/[id].tsx
```tsx
import { useParams, Navigate } from "react-router-dom"
import { BlogPostContent } from "@/components/blog/blog-post-content"
import { blogPosts } from "@/lib/blog/data"
import { useMount } from "@/lib/hooks"

export default function BlogPostPage() {
  const { id } = useParams()
  const mounted = useMount()
  const post = blogPosts.find(post => post.id === parseInt(id || ""))

  if (!mounted) {
    return null
  }

  if (!post) {
    return <Navigate to="/blog" replace />
  }

  return <BlogPostContent post={post} />
}
```

File: client/src/lib/blog-posts.ts
```ts
export * from "./blog/data"
export * from "./blog/types"
```

File: client/src/pages/contact/index.tsx
```tsx
import { ContactForm } from "@/components/contact/contact-form"

export default function ContactPage() {
  return (
    <div className="container mx-auto px-4 py-12">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold mb-4">Get in Touch</h1>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Have a project in mind? We'd love to hear about it. Send us a message and we'll get back to you as soon as possible.
        </p>
      </div>
      <ContactForm />
    </div>
  )
}
```

File: client/src/pages/home/index.tsx
```tsx
import { HeroSection } from "@/components/sections/hero"
import { ServicesSection } from "@/components/sections/services"
import { PortfolioSection } from "@/components/sections/portfolio"
import { TestimonialsSection } from "@/components/sections/testimonials"
import { CTASection } from "@/components/sections/cta"

export default function HomePage() {
  return (
    <div className="flex flex-col gap-20 pb-20">
      <HeroSection />
      <ServicesSection />
      <PortfolioSection />
      <TestimonialsSection />
      <CTASection />
    </div>
  )
}
```

File: client/src/pages/checkout/index.tsx
```tsx
"use client"

import { useEffect } from "react"
import { useNavigate } from "react-router-dom"
import { useCart } from "@/lib/store"
import { PayPalCheckoutButton } from "@/components/checkout/PayPalCheckoutButton"
import { OrderSummary } from "@/components/checkout/order-summary"
import { ShoppingCart } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { useMount } from "@/lib/hooks"

export default function CheckoutPage() {
  const navigate = useNavigate()
  const { items, total } = useCart()
  const mounted = useMount()

  useEffect(() => {
    if (mounted && items.length === 0) {
      navigate("/marketplace")
    }
  }, [items, navigate, mounted])

  if (!mounted || items.length === 0) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center p-4">
        <div className="text-center">
          <ShoppingCart className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
          <h2 className="text-2xl font-bold mb-2">Your cart is empty</h2>
          <p className="text-muted-foreground mb-4">Add some items to your cart to continue checkout</p>
          <Button onClick={() => navigate("/marketplace")}>
            Continue Shopping
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background py-12">
      <div className="container max-w-6xl mx-auto px-4">
        <h1 className="text-3xl font-bold mb-8">Secure Checkout</h1>
        <div className="grid gap-8 lg:grid-cols-2">
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Payment Method</CardTitle>
              </CardHeader>
              <CardContent>
                <PayPalCheckoutButton amount={total} />
              </CardContent>
            </Card>
          </div>
          <div className="lg:sticky lg:top-6">
            <OrderSummary items={items} total={total} />
          </div>
        </div>
      </div>
    </div>
  )
}
```

File: client/src/pages/blog/index.tsx
```tsx
"use client"

import { BlogList } from "@/components/blog/blog-list"
import { blogPosts } from "@/lib/blog/data"
import { useMount } from "@/lib/hooks"

export default function BlogPage() {
  const mounted = useMount()

  if (!mounted) {
    return null
  }

  return <BlogList posts={blogPosts} />
}
```

File: client/src/globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 225 25% 7%;
    --foreground: 210 40% 98%;
    --card: 228 9% 11%;
    --card-foreground: 210 40% 98%;
    --popover: 228 9% 11%;
    --popover-foreground: 210 40% 98%;
    --primary: 349 89% 60%;
    --primary-foreground: 210 40% 98%;
    --secondary: 349 89% 60%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217 19% 27%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 349 89% 60%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217 19% 27%;
    --input: 217 19% 27%;
    --ring: 349 89% 60%;
    --radius: 0.75rem;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

.gradient-border {
  position: relative;
  border-radius: var(--radius);
}

.gradient-border::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: var(--radius);
  padding: 1px;
  background: linear-gradient(to right, hsl(var(--primary)), transparent);
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
  pointer-events: none;
}

.dots-pattern {
  background-image: radial-gradient(circle, hsl(var(--primary)) 1px, transparent 1px);
  background-size: 20px 20px;
  opacity: 0.05;
  z-index: 0;
}
```

File: client/src/App.tsx
```tsx
import { Routes, Route } from "react-router-dom";
import { Providers } from "@/components/providers";
import { Navbar } from "@/components/navbar";
import { Footer } from "@/components/footer";
import { Toaster } from "@/components/ui/toaster";
import HomePage from "@/pages/home";
import MarketplacePage from "@/pages/marketplace";
import BlogPage from "@/pages/blog";
import ContactPage from "@/pages/contact";
import CheckoutPage from "@/pages/checkout";
import BlogPostPage from "@/pages/blog/[id]";

function App() {
  return (
    <Providers>
      <div className="min-h-screen bg-background text-foreground relative">
        <div className="fixed inset-0 dots-pattern pointer-events-none" />
        <Navbar />
        <main>
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/index.html" element={<HomePage />} />
            <Route path="/marketplace" element={<MarketplacePage />} />
            <Route path="/blog" element={<BlogPage />} />
            <Route path="/blog/:id" element={<BlogPostPage />} />
            <Route path="/contact" element={<ContactPage />} />
            <Route path="/checkout" element={<CheckoutPage />} />
          </Routes>
        </main>
        <Footer />
      </div>
      <Toaster />
    </Providers>
  );
}

export default App;

```

File: client/src/pages/home.tsx
```tsx
import { HeroSection } from "@/components/sections/hero"
import { ServicesSection } from "@/components/sections/services"
import { PortfolioSection } from "@/components/sections/portfolio"
import { TestimonialsSection } from "@/components/sections/testimonials"
import { CTASection } from "@/components/sections/cta"

export default function HomePage() {
  return (
    <div className="flex flex-col gap-20 pb-20">
      <HeroSection />
      <ServicesSection />
      <PortfolioSection />
      <TestimonialsSection />
      <CTASection />
    </div>
  )
}
```

File: client/src/pages/marketplace/index.tsx
```tsx
import { ProductGrid } from "@/components/marketplace/product-grid"

export default function MarketplacePage() {
  return (
    <div className="container mx-auto px-4 py-12">
      <div className="max-w-2xl mx-auto text-center mb-12">
        <h1 className="text-4xl font-bold mb-4">Digital Marketplace</h1>
        <p className="text-muted-foreground">
          Explore our curated collection of digital products, design assets, and professional services.
        </p>
      </div>
      <ProductGrid />
    </div>
  )
}
```

File: client/src/index.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 225 25% 7%;
  --foreground: 210 40% 98%;
  --card: 228 9% 11%;
  --card-foreground: 210 40% 98%;
  --popover: 228 9% 11%;
  --popover-foreground: 210 40% 98%;
  --primary: 349 89% 60%;
  --primary-foreground: 210 40% 98%;
  --secondary: 349 89% 60%;
  --secondary-foreground: 210 40% 98%;
  --muted: 217 19% 27%;
  --muted-foreground: 215 20.2% 65.1%;
  --accent: 349 89% 60%;
  --accent-foreground: 210 40% 98%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 40% 98%;
  --border: 217 19% 27%;
  --input: 217 19% 27%;
  --ring: 349 89% 60%;
  --radius: 0.75rem;
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

.gradient-border {
  position: relative;
  border-radius: var(--radius);
}

.gradient-border::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: var(--radius);
  padding: 1px;
  background: linear-gradient(to right, hsl(var(--primary)), transparent);
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
  pointer-events: none;
}

.dots-pattern {
  background-image: radial-gradient(circle, hsl(var(--primary)) 1px, transparent 1px);
  background-size: 20px 20px;
  opacity: 0.05;
  z-index: 0;
}
```

File: client/src/main.tsx
```tsx
import React from "react"
import ReactDOM from "react-dom/client"
import { BrowserRouter } from "react-router-dom"
import App from "./App"
import "./globals.css"

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>,
)
```

File: client/src/stories/assets/accessibility.png
```png
[Binary file]
```

File: client/src/stories/assets/accessibility.svg
```svg
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="none" viewBox="0 0 48 48"><title>Accessibility</title><circle cx="24.334" cy="24" r="24" fill="#A849FF" fill-opacity=".3"/><path fill="#A470D5" fill-rule="evenodd" d="M27.8609 11.585C27.8609 9.59506 26.2497 7.99023 24.2519 7.99023C22.254 7.99023 20.6429 9.65925 20.6429 11.585C20.6429 13.575 22.254 15.1799 24.2519 15.1799C26.2497 15.1799 27.8609 13.575 27.8609 11.585ZM21.8922 22.6473C21.8467 23.9096 21.7901 25.4788 21.5897 26.2771C20.9853 29.0462 17.7348 36.3314 17.3325 37.2275C17.1891 37.4923 17.1077 37.7955 17.1077 38.1178C17.1077 39.1519 17.946 39.9902 18.9802 39.9902C19.6587 39.9902 20.253 39.6293 20.5814 39.0889L20.6429 38.9874L24.2841 31.22C24.2841 31.22 27.5529 37.9214 27.9238 38.6591C28.2948 39.3967 28.8709 39.9902 29.7168 39.9902C30.751 39.9902 31.5893 39.1519 31.5893 38.1178C31.5893 37.7951 31.3639 37.2265 31.3639 37.2265C30.9581 36.3258 27.698 29.0452 27.0938 26.2771C26.8975 25.4948 26.847 23.9722 26.8056 22.7236C26.7927 22.333 26.7806 21.9693 26.7653 21.6634C26.7008 21.214 27.0231 20.8289 27.4097 20.7005L35.3366 18.3253C36.3033 18.0685 36.8834 16.9773 36.6256 16.0144C36.3678 15.0515 35.2722 14.4737 34.3055 14.7305C34.3055 14.7305 26.8619 17.1057 24.2841 17.1057C21.7062 17.1057 14.456 14.7947 14.456 14.7947C13.4893 14.5379 12.3937 14.9873 12.0715 15.9502C11.7493 16.9131 12.3293 18.0044 13.3604 18.3253L21.2873 20.7005C21.674 20.8289 21.9318 21.214 21.9318 21.6634C21.9174 21.9493 21.9053 22.2857 21.8922 22.6473Z" clip-rule="evenodd"/></svg>
```

File: client/src/stories/assets/assets.png
```png
[Binary file]
```

File: client/src/stories/assets/context.png
```png
[Binary file]
```

File: client/src/vite-env.d.ts
```ts
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_PAYPAL_CLIENT_ID: string
  readonly VITE_STRIPE_PUBLISHABLE_KEY: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}
```

File: client/src/stories/assets/addon-library.png
```png
[Binary file]
```

File: client/src/stories/assets/docs.png
```png
[Binary file]
```

File: client/src/stories/assets/share.png
```png
[Binary file]
```

File: client/src/stories/assets/figma-plugin.png
```png
[Binary file]
```

File: client/src/stories/assets/discord.svg
```svg
<svg xmlns="http://www.w3.org/2000/svg" width="33" height="32" fill="none" viewBox="0 0 33 32"><g clip-path="url(#clip0_10031_177575)"><mask id="mask0_10031_177575" style="mask-type:luminance" width="33" height="25" x="0" y="4" maskUnits="userSpaceOnUse"><path fill="#fff" d="M32.5034 4.00195H0.503906V28.7758H32.5034V4.00195Z"/></mask><g mask="url(#mask0_10031_177575)"><path fill="#5865F2" d="M27.5928 6.20817C25.5533 5.27289 23.3662 4.58382 21.0794 4.18916C21.0378 4.18154 20.9962 4.20057 20.9747 4.23864C20.6935 4.73863 20.3819 5.3909 20.1637 5.90358C17.7042 5.53558 15.2573 5.53558 12.8481 5.90358C12.6299 5.37951 12.307 4.73863 12.0245 4.23864C12.003 4.20184 11.9614 4.18281 11.9198 4.18916C9.63431 4.58255 7.44721 5.27163 5.40641 6.20817C5.38874 6.21578 5.3736 6.22848 5.36355 6.24497C1.21508 12.439 0.078646 18.4809 0.636144 24.4478C0.638667 24.477 0.655064 24.5049 0.677768 24.5227C3.41481 26.5315 6.06609 27.7511 8.66815 28.5594C8.70979 28.5721 8.75392 28.5569 8.78042 28.5226C9.39594 27.6826 9.94461 26.7968 10.4151 25.8653C10.4428 25.8107 10.4163 25.746 10.3596 25.7244C9.48927 25.3945 8.66058 24.9922 7.86343 24.5354C7.80038 24.4986 7.79533 24.4084 7.85333 24.3653C8.02108 24.2397 8.18888 24.109 8.34906 23.977C8.37804 23.9529 8.41842 23.9478 8.45249 23.963C13.6894 26.3526 19.359 26.3526 24.5341 23.963C24.5682 23.9465 24.6086 23.9516 24.6388 23.9757C24.799 24.1077 24.9668 24.2397 25.1358 24.3653C25.1938 24.4084 25.19 24.4986 25.127 24.5354C24.3298 25.0011 23.5011 25.3945 22.6296 25.7232C22.5728 25.7447 22.5476 25.8107 22.5754 25.8653C23.0559 26.7955 23.6046 27.6812 24.2087 28.5213C24.234 28.5569 24.2794 28.5721 24.321 28.5594C26.9357 27.7511 29.5869 26.5315 32.324 24.5227C32.348 24.5049 32.3631 24.4783 32.3656 24.4491C33.0328 17.5506 31.2481 11.5584 27.6344 6.24623C27.6256 6.22848 27.6105 6.21578 27.5928 6.20817ZM11.1971 20.8146C9.62043 20.8146 8.32129 19.3679 8.32129 17.5913C8.32129 15.8146 9.59523 14.368 11.1971 14.368C12.8115 14.368 14.0981 15.8273 14.0729 17.5913C14.0729 19.3679 12.7989 20.8146 11.1971 20.8146ZM21.8299 20.8146C20.2533 20.8146 18.9541 19.3679 18.9541 17.5913C18.9541 15.8146 20.228 14.368 21.8299 14.368C23.4444 14.368 24.7309 15.8273 24.7057 17.5913C24.7057 19.3679 23.4444 20.8146 21.8299 20.8146Z"/></g></g><defs><clipPath id="clip0_10031_177575"><rect width="32" height="32" fill="#fff" transform="translate(0.5)"/></clipPath></defs></svg>
```

File: client/src/stories/assets/github.svg
```svg
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none" viewBox="0 0 32 32"><path fill="#161614" d="M16.0001 0C7.16466 0 0 7.17472 0 16.0256C0 23.1061 4.58452 29.1131 10.9419 31.2322C11.7415 31.3805 12.0351 30.8845 12.0351 30.4613C12.0351 30.0791 12.0202 28.8167 12.0133 27.4776C7.56209 28.447 6.62283 25.5868 6.62283 25.5868C5.89499 23.7345 4.8463 23.2419 4.8463 23.2419C3.39461 22.2473 4.95573 22.2678 4.95573 22.2678C6.56242 22.3808 7.40842 23.9192 7.40842 23.9192C8.83547 26.3691 11.1514 25.6609 12.0645 25.2514C12.2081 24.2156 12.6227 23.5087 13.0803 23.1085C9.52648 22.7032 5.7906 21.3291 5.7906 15.1886C5.7906 13.4389 6.41563 12.0094 7.43916 10.8871C7.27303 10.4834 6.72537 8.85349 7.59415 6.64609C7.59415 6.64609 8.93774 6.21539 11.9953 8.28877C13.2716 7.9337 14.6404 7.75563 16.0001 7.74953C17.3599 7.75563 18.7297 7.9337 20.0084 8.28877C23.0623 6.21539 24.404 6.64609 24.404 6.64609C25.2749 8.85349 24.727 10.4834 24.5608 10.8871C25.5868 12.0094 26.2075 13.4389 26.2075 15.1886C26.2075 21.3437 22.4645 22.699 18.9017 23.0957C19.4756 23.593 19.9869 24.5683 19.9869 26.0634C19.9869 28.2077 19.9684 29.9334 19.9684 30.4613C19.9684 30.8877 20.2564 31.3874 21.0674 31.2301C27.4213 29.1086 32 23.1037 32 16.0256C32 7.17472 24.8364 0 16.0001 0ZM5.99257 22.8288C5.95733 22.9084 5.83227 22.9322 5.71834 22.8776C5.60229 22.8253 5.53711 22.7168 5.57474 22.6369C5.60918 22.5549 5.7345 22.5321 5.85029 22.587C5.9666 22.6393 6.03284 22.7489 5.99257 22.8288ZM6.7796 23.5321C6.70329 23.603 6.55412 23.5701 6.45291 23.4581C6.34825 23.3464 6.32864 23.197 6.40601 23.125C6.4847 23.0542 6.62937 23.0874 6.73429 23.1991C6.83895 23.3121 6.85935 23.4605 6.7796 23.5321ZM7.31953 24.4321C7.2215 24.5003 7.0612 24.4363 6.96211 24.2938C6.86407 24.1513 6.86407 23.9804 6.96422 23.9119C7.06358 23.8435 7.2215 23.905 7.32191 24.0465C7.41968 24.1914 7.41968 24.3623 7.31953 24.4321ZM8.23267 25.4743C8.14497 25.5712 7.95818 25.5452 7.82146 25.413C7.68156 25.2838 7.64261 25.1004 7.73058 25.0035C7.81934 24.9064 8.00719 24.9337 8.14497 25.0648C8.28381 25.1938 8.3262 25.3785 8.23267 25.4743ZM9.41281 25.8262C9.37413 25.9517 9.19423 26.0088 9.013 25.9554C8.83203 25.9005 8.7136 25.7535 8.75016 25.6266C8.78778 25.5003 8.96848 25.4408 9.15104 25.4979C9.33174 25.5526 9.45044 25.6985 9.41281 25.8262ZM10.7559 25.9754C10.7604 26.1076 10.6067 26.2172 10.4165 26.2196C10.2252 26.2238 10.0704 26.1169 10.0683 25.9868C10.0683 25.8534 10.2185 25.7448 10.4098 25.7416C10.6001 25.7379 10.7559 25.8441 10.7559 25.9754ZM12.0753 25.9248C12.0981 26.0537 11.9658 26.1862 11.7769 26.2215C11.5912 26.2554 11.4192 26.1758 11.3957 26.0479C11.3726 25.9157 11.5072 25.7833 11.6927 25.7491C11.8819 25.7162 12.0512 25.7937 12.0753 25.9248Z"/></svg>
```

File: client/src/stories/assets/testing.png
```png
[Binary file]
```

File: client/src/stories/assets/styling.png
```png
[Binary file]
```

File: client/src/stories/assets/theming.png
```png
[Binary file]
```

File: client/src/stories/assets/tutorials.svg
```svg
<svg xmlns="http://www.w3.org/2000/svg" width="33" height="32" fill="none" viewBox="0 0 33 32"><g clip-path="url(#clip0_10031_177597)"><path fill="#B7F0EF" fill-rule="evenodd" d="M17 7.87059C17 6.48214 17.9812 5.28722 19.3431 5.01709L29.5249 2.99755C31.3238 2.64076 33 4.01717 33 5.85105V22.1344C33 23.5229 32.0188 24.7178 30.6569 24.9879L20.4751 27.0074C18.6762 27.3642 17 25.9878 17 24.1539L17 7.87059Z" clip-rule="evenodd" opacity=".7"/><path fill="#87E6E5" fill-rule="evenodd" d="M1 5.85245C1 4.01857 2.67623 2.64215 4.47507 2.99895L14.6569 5.01848C16.0188 5.28861 17 6.48354 17 7.87198V24.1553C17 25.9892 15.3238 27.3656 13.5249 27.0088L3.34311 24.9893C1.98119 24.7192 1 23.5242 1 22.1358V5.85245Z" clip-rule="evenodd"/><path fill="#61C1FD" fill-rule="evenodd" d="M15.543 5.71289C15.543 5.71289 16.8157 5.96289 17.4002 6.57653C17.9847 7.19016 18.4521 9.03107 18.4521 9.03107C18.4521 9.03107 18.4521 25.1106 18.4521 26.9629C18.4521 28.8152 19.3775 31.4174 19.3775 31.4174L17.4002 28.8947L16.2575 31.4174C16.2575 31.4174 15.543 29.0765 15.543 27.122C15.543 25.1674 15.543 5.71289 15.543 5.71289Z" clip-rule="evenodd"/></g><defs><clipPath id="clip0_10031_177597"><rect width="32" height="32" fill="#fff" transform="translate(0.5)"/></clipPath></defs></svg>
```

File: client/src/stories/Configure.mdx
```mdx
import { Meta } from "@storybook/blocks";

import Github from "./assets/github.svg";
import Discord from "./assets/discord.svg";
import Youtube from "./assets/youtube.svg";
import Tutorials from "./assets/tutorials.svg";
import Styling from "./assets/styling.png";
import Context from "./assets/context.png";
import Assets from "./assets/assets.png";
import Docs from "./assets/docs.png";
import Share from "./assets/share.png";
import FigmaPlugin from "./assets/figma-plugin.png";
import Testing from "./assets/testing.png";
import Accessibility from "./assets/accessibility.png";
import Theming from "./assets/theming.png";
import AddonLibrary from "./assets/addon-library.png";

export const RightArrow = () => <svg 
    viewBox="0 0 14 14" 
    width="8px" 
    height="14px" 
    style={{ 
      marginLeft: '4px',
      display: 'inline-block',
      shapeRendering: 'inherit',
      verticalAlign: 'middle',
      fill: 'currentColor',
      'path fill': 'currentColor'
    }}
>
  <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
</svg>

<Meta title="Configure your project" />

<div className="sb-container">
  <div className='sb-section-title'>
    # Configure your project

    Because Storybook works separately from your app, you'll need to configure it for your specific stack and setup. Below, explore guides for configuring Storybook with popular frameworks and tools. If you get stuck, learn how you can ask for help from our community.
  </div>
  <div className="sb-section">
    <div className="sb-section-item">
      <img
        src={Styling}
        alt="A wall of logos representing different styling technologies"
      />
      <h4 className="sb-section-item-heading">Add styling and CSS</h4>
      <p className="sb-section-item-paragraph">Like with web applications, there are many ways to include CSS within Storybook. Learn more about setting up styling within Storybook.</p>
      <a
        href="https://storybook.js.org/docs/configure/styling-and-css/?renderer=react"
        target="_blank"
      >Learn more<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <img
        src={Context}
        alt="An abstraction representing the composition of data for a component"
      />
      <h4 className="sb-section-item-heading">Provide context and mocking</h4>
      <p className="sb-section-item-paragraph">Often when a story doesn't render, it's because your component is expecting a specific environment or context (like a theme provider) to be available.</p>
      <a
        href="https://storybook.js.org/docs/writing-stories/decorators/?renderer=react#context-for-mocking"
        target="_blank"
      >Learn more<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <img src={Assets} alt="A representation of typography and image assets" />
      <div>
        <h4 className="sb-section-item-heading">Load assets and resources</h4>
        <p className="sb-section-item-paragraph">To link static files (like fonts) to your projects and stories, use the
        `staticDirs` configuration option to specify folders to load when
        starting Storybook.</p>
        <a
          href="https://storybook.js.org/docs/configure/images-and-assets/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
    </div>
  </div>
</div>
<div className="sb-container">
  <div className='sb-section-title'>
    # Do more with Storybook

    Now that you know the basics, let's explore other parts of Storybook that will improve your experience. This list is just to get you started. You can customise Storybook in many ways to fit your needs.
  </div>

  <div className="sb-section">
    <div className="sb-features-grid">
      <div className="sb-grid-item">
        <img src={Docs} alt="A screenshot showing the autodocs tag being set, pointing a docs page being generated" />
        <h4 className="sb-section-item-heading">Autodocs</h4>
        <p className="sb-section-item-paragraph">Auto-generate living,
          interactive reference documentation from your components and stories.</p>
        <a
          href="https://storybook.js.org/docs/writing-docs/autodocs/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <img src={Share} alt="A browser window showing a Storybook being published to a chromatic.com URL" />
        <h4 className="sb-section-item-heading">Publish to Chromatic</h4>
        <p className="sb-section-item-paragraph">Publish your Storybook to review and collaborate with your entire team.</p>
        <a
          href="https://storybook.js.org/docs/sharing/publish-storybook/?renderer=react#publish-storybook-with-chromatic"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <img src={FigmaPlugin} alt="Windows showing the Storybook plugin in Figma" />
        <h4 className="sb-section-item-heading">Figma Plugin</h4>
        <p className="sb-section-item-paragraph">Embed your stories into Figma to cross-reference the design and live
          implementation in one place.</p>
        <a
          href="https://storybook.js.org/docs/sharing/design-integrations/?renderer=react#embed-storybook-in-figma-with-the-plugin"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <img src={Testing} alt="Screenshot of tests passing and failing" />
        <h4 className="sb-section-item-heading">Testing</h4>
        <p className="sb-section-item-paragraph">Use stories to test a component in all its variations, no matter how
          complex.</p>
        <a
          href="https://storybook.js.org/docs/writing-tests/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <img src={Accessibility} alt="Screenshot of accessibility tests passing and failing" />
        <h4 className="sb-section-item-heading">Accessibility</h4>
        <p className="sb-section-item-paragraph">Automatically test your components for a11y issues as you develop.</p>
        <a
          href="https://storybook.js.org/docs/writing-tests/accessibility-testing/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <img src={Theming} alt="Screenshot of Storybook in light and dark mode" />
        <h4 className="sb-section-item-heading">Theming</h4>
        <p className="sb-section-item-paragraph">Theme Storybook's UI to personalize it to your project.</p>
        <a
          href="https://storybook.js.org/docs/configure/theming/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
    </div>
  </div>
</div>
<div className='sb-addon'>
  <div className='sb-addon-text'>
    <h4>Addons</h4>
    <p className="sb-section-item-paragraph">Integrate your tools with Storybook to connect workflows.</p>
    <a
        href="https://storybook.js.org/addons/"
        target="_blank"
      >Discover all addons<RightArrow /></a>
  </div>
  <div className='sb-addon-img'>
    <img src={AddonLibrary} alt="Integrate your tools with Storybook to connect workflows." />
  </div>
</div>

<div className="sb-section sb-socials">
    <div className="sb-section-item">
      <img src={Github} alt="Github logo" className="sb-explore-image"/>
      Join our contributors building the future of UI development.

      <a
        href="https://github.com/storybookjs/storybook"
        target="_blank"
      >Star on GitHub<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <img src={Discord} alt="Discord logo" className="sb-explore-image"/>
      <div>
        Get support and chat with frontend developers.

        <a
          href="https://discord.gg/storybook"
          target="_blank"
        >Join Discord server<RightArrow /></a>
      </div>
    </div>
    <div className="sb-section-item">
      <img src={Youtube} alt="Youtube logo" className="sb-explore-image"/>
      <div>
        Watch tutorials, feature previews and interviews.

        <a
          href="https://www.youtube.com/@chromaticui"
          target="_blank"
        >Watch on YouTube<RightArrow /></a>
      </div>
    </div>
    <div className="sb-section-item">
      <img src={Tutorials} alt="A book" className="sb-explore-image"/>
      <p>Follow guided walkthroughs on for key workflows.</p>

      <a
          href="https://storybook.js.org/tutorials/"
          target="_blank"
        >Discover tutorials<RightArrow /></a>
    </div>
</div>

<style>
  {`
  .sb-container {
    margin-bottom: 48px;
  }

  .sb-section {
    width: 100%;
    display: flex;
    flex-direction: row;
    gap: 20px;
  }

  img {
    object-fit: cover;
  }

  .sb-section-title {
    margin-bottom: 32px;
  }

  .sb-section a:not(h1 a, h2 a, h3 a) {
    font-size: 14px;
  }

  .sb-section-item, .sb-grid-item {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .sb-section-item-heading {
    padding-top: 20px !important;
    padding-bottom: 5px !important;
    margin: 0 !important;
  }
  .sb-section-item-paragraph {
    margin: 0;
    padding-bottom: 10px;
  }

  .sb-chevron {
    margin-left: 5px;
  }

  .sb-features-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 32px 20px;
  }

  .sb-socials {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }

  .sb-socials p {
    margin-bottom: 10px;
  }

  .sb-explore-image {
    max-height: 32px;
    align-self: flex-start;
  }

  .sb-addon {
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    background-color: #EEF3F8;
    border-radius: 5px;
    border: 1px solid rgba(0, 0, 0, 0.05);
    background: #EEF3F8;
    height: 180px;
    margin-bottom: 48px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 48px;
    max-width: 240px;
  }

  .sb-addon-text h4 {
    padding-top: 0px;
  }

  .sb-addon-img {
    position: absolute;
    left: 345px;
    top: 0;
    height: 100%;
    width: 200%;
    overflow: hidden;
  }

  .sb-addon-img img {
    width: 650px;
    transform: rotate(-15deg);
    margin-left: 40px;
    margin-top: -72px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0);
    backface-visibility: hidden;
  }

  @media screen and (max-width: 800px) {
    .sb-addon-img {
      left: 300px;
    }
  }

  @media screen and (max-width: 600px) {
    .sb-section {
      flex-direction: column;
    }

    .sb-features-grid {
      grid-template-columns: repeat(1, 1fr);
    }

    .sb-socials {
      grid-template-columns: repeat(2, 1fr);
    }

    .sb-addon {
      height: 280px;
      align-items: flex-start;
      padding-top: 32px;
      overflow: hidden;
    }

    .sb-addon-text {
      padding-left: 24px;
    }

    .sb-addon-img {
      right: 0;
      left: 0;
      top: 130px;
      bottom: 0;
      overflow: hidden;
      height: auto;
      width: 124%;
    }

    .sb-addon-img img {
      width: 1200px;
      transform: rotate(-12deg);
      margin-left: 0;
      margin-top: 48px;
      margin-bottom: -40px;
      margin-left: -24px;
    }
  }
  `}
</style>

```

File: client/src/stories/assets/youtube.svg
```svg
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none" viewBox="0 0 32 32"><path fill="#ED1D24" d="M31.3313 8.44657C30.9633 7.08998 29.8791 6.02172 28.5022 5.65916C26.0067 5.00026 16 5.00026 16 5.00026C16 5.00026 5.99333 5.00026 3.4978 5.65916C2.12102 6.02172 1.03665 7.08998 0.668678 8.44657C0 10.9053 0 16.0353 0 16.0353C0 16.0353 0 21.1652 0.668678 23.6242C1.03665 24.9806 2.12102 26.0489 3.4978 26.4116C5.99333 27.0703 16 27.0703 16 27.0703C16 27.0703 26.0067 27.0703 28.5022 26.4116C29.8791 26.0489 30.9633 24.9806 31.3313 23.6242C32 21.1652 32 16.0353 32 16.0353C32 16.0353 32 10.9053 31.3313 8.44657Z"/><path fill="#fff" d="M12.7266 20.6934L21.0902 16.036L12.7266 11.3781V20.6934Z"/></svg>
```

File: client/src/stories/assets/avif-test-image.avif
```avif
    ftypavif    avifmif1miafMA1B   Úmeta       (hdlr        pict            libavif    pitm        iloc    D          #   (iinf        infe      av01Color    jiprp   Kipco   ispe           pixi       av1CÅ     colrnclx   Ä   ipma        É  +mdat 

"!–Ê4 2íLÑ›4Cxpå ¢ù£(Zyf›M;Œ– æ’$•≠«˛î…“ŸrØbïF±s—*tıe–>7¯ÛéÌò†ïÍ™ô3soêë™Z≈r‚ ƒK≤íöO8\¸˚¸JÉúã€øŸ(â6ÂF’ñ≥¿oóº≠P°PDf¥]˝T⁄ü—˙ähaS8,∫¿_v¢E<“{th0&tdÙå3ÊëûX[©¢_óîr¯ÚxÑÔVµ¶ÆH-ŸÒøpàπÙˇ∞ÛUaä∞*.zy‰À‹;⁄<˛M†:ïë	˙ºs!G	-
<§4_y?>Ò
{‰0π_Ÿ9œªèøU(m\VÒü“„≥±SÚB#≤}&ÓJÉÓÃ&5
6ù˜ó8Œï÷”πû&c‹<Q<‘ó€¥“ìÉ£FñO¯•ı:¿›E¡¸p:ª36vÑﬁb¨±≥˝∞^≈âdväìêg@Ç¯Ùõo’Lø4X/◊È˚d*
r›OuPg∆©7˜^@∆£™·•≥"«§ú=Æ™{ÉıEïëÂU\zåúoﬂcCπü¨(eœ€|óÌµQƒ•Éº\8˛S“˜a‘ „ØA}á[lIÀNÉ4˚Ã’ ”RÑü.∏ÿ·ê—ºµ	ÀÇ©´∂˜Ùä™†àã˘Ö˚¿Ò·cCÅ6˚†‰èOà‚ª„ ê‹WÕ‘“È9w´nqcIC_yµ
```
</file_contents>


</CODEBASE>
<INSTRUCTIONS>
Use the <CODEBASE> code as reference, and convert the high-level <TASK> into a set of very detailed step-by-step instructions that an AI coding agent can complete. This could be very long, that's okay. The entire code is not needed, but give snippets if needed, but be very specific about the file names.
Only includes steps an AI coding agent can take. Do not include testing or any other work a human would do to confirm the task has been completed. 
ALWAYS have the agent run a build when it is complete. Be specific and decisive about what the agent should do. 
Do not include any additional meta instructions to the user. Use markdown formatting.
</INSTRUCTIONS>

</TEMPLATE>